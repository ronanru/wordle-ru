{"version":3,"file":"bundle.js","sources":["../../node_modules/.pnpm/svelte@3.46.4/node_modules/svelte/internal/index.mjs","../../src/words.ts","../../src/Keyboard.svelte","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true && boolean_attributes.has(name) ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.46.4' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","export const words = [\n    'абаец',\n    'абака',\n    'абаси',\n    'аббат',\n    'абвер',\n    'абзац',\n    'абзим',\n    'абиоз',\n    'абома',\n    'аборт',\n    'абрек',\n    'абрин',\n    'абрис',\n    'аброн',\n    'абсит',\n    'абунг',\n    'абура',\n    'абхаз',\n    'абцуг',\n    'абшид',\n    'аваги',\n    'аваль',\n    'аванс',\n    'авгит',\n    'авгур',\n    'авеню',\n    'аверс',\n    'авизо',\n    'авлет',\n    'авлос',\n    'авост',\n    'авось',\n    'аврал',\n    'авран',\n    'автол',\n    'автор',\n    'авуар',\n    'агава',\n    'агама',\n    'агами',\n    'аганц',\n    'агапе',\n    'аггел',\n    'агема',\n    'агенс',\n    'агент',\n    'агнат',\n    'агнел',\n    'агнец',\n    'агоги',\n    'агого',\n    'агона',\n    'агора',\n    'аграф',\n    'агуйя',\n    'агути',\n    'адель',\n    'адепт',\n    'адник',\n    'адоба',\n    'адрес',\n    'адрон',\n    'адряс',\n    'адыге',\n    'ажгон',\n    'азара',\n    'азарт',\n    'азери',\n    'азиат',\n    'азиец',\n    'азиль',\n    'азина',\n    'азога',\n    'айван',\n    'аймак',\n    'айова',\n    'айоли',\n    'айран',\n    'айрен',\n    'айрон',\n    'айсор',\n    'айтыс',\n    'акажу',\n    'акант',\n    'акара',\n    'акаша',\n    'акбаш',\n    'акиба',\n    'акита',\n    'аккит',\n    'акмит',\n    'акнит',\n    'акори',\n    'акреп',\n    'акрил',\n    'акрит',\n    'аксин',\n    'аксис',\n    'аксон',\n    'актер',\n    'актив',\n    'актин',\n    'актор',\n    'акула',\n    'акциз',\n    'акция',\n    'алаец',\n    'алаит',\n    'алапа',\n    'аларм',\n    'алаша',\n    'алгид',\n    'алгия',\n    'алгол',\n    'алдар',\n    'алеец',\n    'алеут',\n    'алиби',\n    'аличи',\n    'алкан',\n    'алкен',\n    'алкид',\n    'алкил',\n    'алкин',\n    'аллен',\n    'аллея',\n    'аллил',\n    'аллит',\n    'аллод',\n    'аллюр',\n    'алмаз',\n    'алмуд',\n    'алоза',\n    'алтей',\n    'алтын',\n    'алунд',\n    'алфер',\n    'алчба',\n    'алыча',\n    'альба',\n    'альфа',\n    'амаас',\n    'амбал',\n    'амбар',\n    'амбра',\n    'амбре',\n    'амвон',\n    'амеба',\n    'амеро',\n    'аминь',\n    'амиур',\n    'аммин',\n    'ампер',\n    'ампир',\n    'анаша',\n    'ангар',\n    'ангас',\n    'ангел',\n    'англы',\n    'ангоб',\n    'ангон',\n    'андид',\n    'андоб',\n    'андон',\n    'аниец',\n    'анима',\n    'аниме',\n    'анион',\n    'анкер',\n    'анкош',\n    'анкус',\n    'аннит',\n    'аноит',\n    'анойя',\n    'анона',\n    'анонс',\n    'ансар',\n    'антем',\n    'антик',\n    'антия',\n    'антре',\n    'антур',\n    'антье',\n    'анфас',\n    'анчар',\n    'аншеф',\n    'аньюм',\n    'аорта',\n    'апайо',\n    'апана',\n    'апарт',\n    'апачи',\n    'апекс',\n    'апиин',\n    'апиол',\n    'апион',\n    'аплит',\n    'аплом',\n    'апноэ',\n    'апорт',\n    'апрок',\n    'апрон',\n    'апрош',\n    'апсар',\n    'аптих',\n    'апфль',\n    'араза',\n    'арама',\n    'араме',\n    'арара',\n    'арбуз',\n    'аргал',\n    'аргас',\n    'аргон',\n    'аргус',\n    'арден',\n    'ареал',\n    'арека',\n    'арена',\n    'арест',\n    'арзис',\n    'ариец',\n    'арион',\n    'аркад',\n    'аркал',\n    'аркан',\n    'аркат',\n    'аркоз',\n    'армет',\n    'армин',\n    'армия',\n    'армюр',\n    'армяк',\n    'ароил',\n    'арпан',\n    'аррау',\n    'аррип',\n    'арсин',\n    'арсол',\n    'артиг',\n    'артос',\n    'артха',\n    'архар',\n    'архат',\n    'архей',\n    'архея',\n    'архив',\n    'арчак',\n    'аршин',\n    'асадо',\n    'асана',\n    'асафо',\n    'аскер',\n    'аскет',\n    'аскон',\n    'аскос',\n    'аскот',\n    'аспер',\n    'аспид',\n    'аспит',\n    'ассиз',\n    'астат',\n    'астер',\n    'астма',\n    'астра',\n    'асура',\n    'асцит',\n    'атака',\n    'атлас',\n    'атлет',\n    'атман',\n    'атолл',\n    'атони',\n    'атрий',\n    'аттан',\n    'аттик',\n    'аудио',\n    'аудит',\n    'аурат',\n    'аурин',\n    'аурон',\n    'афган',\n    'афера',\n    'афиша',\n    'афтоз',\n    'ахеец',\n    'ахилл',\n    'ахоит',\n    'ахунд',\n    'ацена',\n    'ацера',\n    'ацтек',\n    'ачали',\n    'ачоли',\n    'ашико',\n    'ашрам',\n    'аштец',\n    'аэроб',\n    'аэрон',\n    'аянец',\n    'аятит',\n    'аяцин',\n    'бабид',\n    'бабка',\n    'бабоа',\n    'багаж',\n    'багги',\n    'багер',\n    'багет',\n    'багор',\n    'багуа',\n    'бадан',\n    'бадик',\n    'бадис',\n    'бадук',\n    'бадья',\n    'базан',\n    'базар',\n    'базис',\n    'базит',\n    'байга',\n    'байда',\n    'байер',\n    'байза',\n    'байка',\n    'бакан',\n    'бакве',\n    'бакен',\n    'бакля',\n    'бакор',\n    'бакун',\n    'балда',\n    'балдж',\n    'балет',\n    'балия',\n    'балка',\n    'балок',\n    'балти',\n    'балун',\n    'балык',\n    'бальи',\n    'баляш',\n    'бамия',\n    'бамум',\n    'банан',\n    'банар',\n    'банги',\n    'банда',\n    'банди',\n    'бандо',\n    'банка',\n    'банко',\n    'банту',\n    'банши',\n    'барак',\n    'баран',\n    'барат',\n    'барба',\n    'барда',\n    'бареж',\n    'баржа',\n    'барий',\n    'барин',\n    'барит',\n    'барич',\n    'бария',\n    'барка',\n    'бармы',\n    'барон',\n    'баррэ',\n    'барыш',\n    'баска',\n    'басма',\n    'басня',\n    'басок',\n    'басон',\n    'бастр',\n    'батан',\n    'батат',\n    'батва',\n    'батик',\n    'батог',\n    'батон',\n    'батос',\n    'батун',\n    'батут',\n    'батыр',\n    'бауит',\n    'бауле',\n    'баунс',\n    'бафия',\n    'бахта',\n    'бахча',\n    'бахши',\n    'бацен',\n    'бачок',\n    'башня',\n    'бебут',\n    'бегун',\n    'беджа',\n    'бедро',\n    'безик',\n    'бейгл',\n    'бейза',\n    'бейка',\n    'бейра',\n    'бекар',\n    'бекас',\n    'бекон',\n    'белги',\n    'белек',\n    'белец',\n    'белит',\n    'белка',\n    'белок',\n    'белье',\n    'бельт',\n    'беляк',\n    'беляш',\n    'бемба',\n    'бемит',\n    'бенди',\n    'бенто',\n    'бердо',\n    'берег',\n    'берет',\n    'берма',\n    'берси',\n    'берсо',\n    'берта',\n    'берце',\n    'берцо',\n    'бесса',\n    'бетон',\n    'бетта',\n    'бефол',\n    'биакс',\n    'бибоп',\n    'бивак',\n    'бигль',\n    'бигос',\n    'бидон',\n    'бизон',\n    'бикит',\n    'бикол',\n    'бикса',\n    'билби',\n    'билет',\n    'билин',\n    'билль',\n    'бинго',\n    'бинди',\n    'бинду',\n    'бинет',\n    'бином',\n    'бинор',\n    'биоза',\n    'бионт',\n    'биота',\n    'бипак',\n    'бипед',\n    'бипер',\n    'биржа',\n    'бирка',\n    'бирюк',\n    'бирюч',\n    'бисер',\n    'бисса',\n    'бисти',\n    'бистр',\n    'битва',\n    'битка',\n    'биток',\n    'битум',\n    'битье',\n    'битюг',\n    'бифас',\n    'бишон',\n    'бишоп',\n    'благо',\n    'блажь',\n    'бланк',\n    'бланш',\n    'бласт',\n    'блеск',\n    'близь',\n    'блинд',\n    'блинт',\n    'блоха',\n    'блуза',\n    'блюдо',\n    'бляха',\n    'бобер',\n    'бобик',\n    'бобок',\n    'богач',\n    'бодхи',\n    'бодяк',\n    'божба',\n    'божок',\n    'бозах',\n    'бозец',\n    'бозон',\n    'бойга',\n    'бойит',\n    'бойки',\n    'бойня',\n    'бокаж',\n    'бокал',\n    'бокит',\n    'бокка',\n    'бокой',\n    'болет',\n    'болид',\n    'болюс',\n    'бомба',\n    'бомбо',\n    'бонга',\n    'бонго',\n    'бонгу',\n    'бонет',\n    'бонза',\n    'бонка',\n    'бонмо',\n    'бонна',\n    'бонус',\n    'боопс',\n    'боран',\n    'борат',\n    'бордо',\n    'борей',\n    'борец',\n    'борид',\n    'борий',\n    'борил',\n    'борин',\n    'боров',\n    'борол',\n    'борть',\n    'босяк',\n    'ботва',\n    'ботик',\n    'ботус',\n    'боция',\n    'бочаг',\n    'бочар',\n    'бочка',\n    'бочче',\n    'браво',\n    'брага',\n    'бракк',\n    'брана',\n    'брань',\n    'браса',\n    'брасс',\n    'браха',\n    'бреве',\n    'брейк',\n    'бремя',\n    'бренд',\n    'брешь',\n    'бриар',\n    'бридж',\n    'бриза',\n    'бритт',\n    'бровь',\n    'бронх',\n    'бронь',\n    'броня',\n    'броше',\n    'брошь',\n    'брыжи',\n    'брыла',\n    'брыль',\n    'брюки',\n    'брюхо',\n    'бубал',\n    'бубен',\n    'бубна',\n    'бубон',\n    'бувье',\n    'бугай',\n    'бугор',\n    'будда',\n    'будзю',\n    'будин',\n    'будка',\n    'будни',\n    'будра',\n    'бузун',\n    'буква',\n    'букер',\n    'букет',\n    'букле',\n    'букля',\n    'букол',\n    'букса',\n    'букша',\n    'булат',\n    'булка',\n    'булла',\n    'бульб',\n    'бунак',\n    'бурав',\n    'бурак',\n    'буран',\n    'бурат',\n    'бурда',\n    'бурка',\n    'бурма',\n    'бурре',\n    'бурса',\n    'бурун',\n    'бурят',\n    'бутан',\n    'бутен',\n    'бутик',\n    'бутил',\n    'бутин',\n    'бутит',\n    'бутия',\n    'бутон',\n    'бутса',\n    'бутуз',\n    'бутут',\n    'буфер',\n    'буфет',\n    'буфол',\n    'бухит',\n    'бухта',\n    'быдло',\n    'былка',\n    'былое',\n    'былье',\n    'бытие',\n    'бытье',\n    'бычок',\n    'бювар',\n    'бювет',\n    'бюкса',\n    'вабик',\n    'ваган',\n    'вагон',\n    'вазон',\n    'вайда',\n    'вайма',\n    'вакат',\n    'вакка',\n    'вакса',\n    'вакус',\n    'вакуф',\n    'валах',\n    'валеж',\n    'валек',\n    'валер',\n    'валет',\n    'валец',\n    'валик',\n    'валил',\n    'валин',\n    'валка',\n    'валок',\n    'валуй',\n    'валун',\n    'валух',\n    'вальс',\n    'ванга',\n    'ванда',\n    'ванец',\n    'ванна',\n    'ванта',\n    'вапор',\n    'варан',\n    'варва',\n    'варек',\n    'варка',\n    'варна',\n    'варяг',\n    'варяк',\n    'ватер',\n    'ватин',\n    'ватка',\n    'ватты',\n    'вафля',\n    'вахня',\n    'вахта',\n    'вброс',\n    'вдова',\n    'вебер',\n    'веган',\n    'ведда',\n    'ведро',\n    'ведун',\n    'вежда',\n    'везир',\n    'вейка',\n    'векша',\n    'велец',\n    'велик',\n    'велит',\n    'велум',\n    'вельд',\n    'вельс',\n    'велюр',\n    'венге',\n    'венгр',\n    'венда',\n    'венед',\n    'венет',\n    'венец',\n    'веник',\n    'венит',\n    'венка',\n    'венок',\n    'вента',\n    'венус',\n    'вепрь',\n    'верба',\n    'вервь',\n    'веред',\n    'верея',\n    'верже',\n    'верит',\n    'верпа',\n    'версо',\n    'верфь',\n    'верша',\n    'весло',\n    'весна',\n    'весок',\n    'веста',\n    'весть',\n    'ветал',\n    'ветвь',\n    'ветер',\n    'ветка',\n    'ветла',\n    'вечер',\n    'вечин',\n    'вешка',\n    'вещун',\n    'взбег',\n    'взвар',\n    'взвод',\n    'взвоз',\n    'вздор',\n    'вздох',\n    'взлет',\n    'взлив',\n    'взлом',\n    'взмах',\n    'взмет',\n    'взмыв',\n    'взнос',\n    'взрез',\n    'взрыв',\n    'взрыд',\n    'взъем',\n    'вивер',\n    'вигна',\n    'видам',\n    'видео',\n    'видиа',\n    'видик',\n    'видок',\n    'визаж',\n    'визир',\n    'визит',\n    'визор',\n    'вийот',\n    'викит',\n    'вилик',\n    'вилка',\n    'вилла',\n    'вилок',\n    'винея',\n    'винил',\n    'винин',\n    'винир',\n    'винол',\n    'винту',\n    'виола',\n    'випий',\n    'вираж',\n    'вирус',\n    'вирши',\n    'виска',\n    'виски',\n    'висок',\n    'вития',\n    'виток',\n    'виттл',\n    'витье',\n    'вихор',\n    'вихрь',\n    'вицин',\n    'вишап',\n    'вишня',\n    'вклад',\n    'влага',\n    'вобла',\n    'вогул',\n    'водка',\n    'вожак',\n    'вождь',\n    'вожжа',\n    'возка',\n    'возня',\n    'возок',\n    'война',\n    'вокал',\n    'вокар',\n    'волан',\n    'волна',\n    'волок',\n    'волос',\n    'волоф',\n    'волхв',\n    'вольт',\n    'волюм',\n    'вомер',\n    'вопль',\n    'ворог',\n    'ворон',\n    'ворот',\n    'ворох',\n    'ворса',\n    'ворст',\n    'ворье',\n    'вотум',\n    'вотяк',\n    'вояка',\n    'впуск',\n    'враки',\n    'враль',\n    'врата',\n    'время',\n    'вруша',\n    'вскип',\n    'вскок',\n    'вспых',\n    'всход',\n    'втора',\n    'вуаль',\n    'вчера',\n    'въезд',\n    'выбег',\n    'выбой',\n    'выбор',\n    'вывал',\n    'вывес',\n    'вывих',\n    'вывод',\n    'вывоз',\n    'выгар',\n    'выгиб',\n    'выгон',\n    'выгул',\n    'выдел',\n    'выдох',\n    'выдра',\n    'выдув',\n    'выезд',\n    'выжиг',\n    'выжим',\n    'выжла',\n    'вызов',\n    'выкат',\n    'выкид',\n    'выкол',\n    'выкос',\n    'выкуп',\n    'выкус',\n    'вылаз',\n    'вылет',\n    'вылив',\n    'вылов',\n    'вылом',\n    'вымах',\n    'вымет',\n    'вымич',\n    'вынос',\n    'выпад',\n    'выпал',\n    'выпар',\n    'выпас',\n    'выпор',\n    'выпот',\n    'вырез',\n    'выруб',\n    'вырыв',\n    'высев',\n    'высед',\n    'высол',\n    'вытие',\n    'вытье',\n    'выход',\n    'вычет',\n    'вышаг',\n    'вышка',\n    'вьюга',\n    'вьяна',\n    'вязка',\n    'вятец',\n    'вятич',\n    'вятка',\n    'габар',\n    'гавит',\n    'гавот',\n    'гагат',\n    'газер',\n    'газон',\n    'гайда',\n    'гайка',\n    'гайно',\n    'гайот',\n    'галец',\n    'галит',\n    'галка',\n    'галла',\n    'галле',\n    'галло',\n    'галон',\n    'галоп',\n    'галун',\n    'галут',\n    'гамак',\n    'гаман',\n    'гамба',\n    'гамма',\n    'гамон',\n    'ганаш',\n    'ганда',\n    'ганец',\n    'ганий',\n    'ганит',\n    'гания',\n    'ганка',\n    'гараж',\n    'гарда',\n    'гарде',\n    'гарди',\n    'гареа',\n    'гарем',\n    'гарна',\n    'гаруа',\n    'гарус',\n    'гаста',\n    'гаусс',\n    'гаучо',\n    'гахам',\n    'гачек',\n    'гашиш',\n    'гаюин',\n    'гбайя',\n    'гвалт',\n    'гваяк',\n    'гевея',\n    'гезит',\n    'гейша',\n    'гекат',\n    'гекта',\n    'гелий',\n    'гелин',\n    'гелит',\n    'гемам',\n    'гемин',\n    'гемма',\n    'генез',\n    'гений',\n    'генин',\n    'геном',\n    'генри',\n    'генро',\n    'геоид',\n    'герит',\n    'герлс',\n    'герма',\n    'герой',\n    'гетит',\n    'гетра',\n    'гетто',\n    'гжель',\n    'гибка',\n    'гидра',\n    'гиена',\n    'гижда',\n    'гилея',\n    'гилия',\n    'гиляк',\n    'гимен',\n    'гинец',\n    'гинея',\n    'гипак',\n    'гипюр',\n    'гирих',\n    'гирло',\n    'гирча',\n    'гитан',\n    'гитов',\n    'гичка',\n    'глава',\n    'главк',\n    'гладь',\n    'глайд',\n    'глеба',\n    'глефа',\n    'глиеж',\n    'глина',\n    'глинт',\n    'глиоз',\n    'глипт',\n    'глист',\n    'глубь',\n    'глушь',\n    'глыба',\n    'глюон',\n    'глясе',\n    'гмина',\n    'гнейс',\n    'гнида',\n    'гниль',\n    'гнома',\n    'гобан',\n    'гобой',\n    'говор',\n    'гогот',\n    'гоист',\n    'гокко',\n    'голар',\n    'голем',\n    'голет',\n    'голец',\n    'голик',\n    'голод',\n    'голос',\n    'голыш',\n    'гольд',\n    'голье',\n    'гольф',\n    'голяк',\n    'гомбо',\n    'гомон',\n    'гонан',\n    'гонга',\n    'гонец',\n    'гонит',\n    'гонка',\n    'гонок',\n    'гонор',\n    'гопак',\n    'гопан',\n    'гопен',\n    'горал',\n    'горец',\n    'гореш',\n    'горжа',\n    'горит',\n    'горка',\n    'горло',\n    'город',\n    'горох',\n    'горст',\n    'гость',\n    'готра',\n    'гофер',\n    'гофре',\n    'гохуа',\n    'гошма',\n    'граве',\n    'грайк',\n    'грайм',\n    'грамм',\n    'грана',\n    'гранд',\n    'гранж',\n    'грано',\n    'грант',\n    'грань',\n    'граус',\n    'графа',\n    'графт',\n    'грахт',\n    'гребо',\n    'грежа',\n    'греза',\n    'грейд',\n    'грена',\n    'греча',\n    'грива',\n    'гридь',\n    'гриль',\n    'гриот',\n    'грипп',\n    'гроза',\n    'грозд',\n    'гроот',\n    'гросс',\n    'гроул',\n    'гроут',\n    'груба',\n    'груда',\n    'грудь',\n    'грунт',\n    'груси',\n    'груша',\n    'грыжа',\n    'гряда',\n    'грязь',\n    'гуава',\n    'гуано',\n    'гуань',\n    'гуари',\n    'гуаро',\n    'гуато',\n    'гуашь',\n    'губан',\n    'губач',\n    'губка',\n    'гугол',\n    'гудок',\n    'гужон',\n    'гузка',\n    'гуиро',\n    'гукар',\n    'гукер',\n    'гукор',\n    'гулям',\n    'гуляш',\n    'гумай',\n    'гумат',\n    'гумин',\n    'гумит',\n    'гумма',\n    'гумми',\n    'гумно',\n    'гумус',\n    'гунди',\n    'гунду',\n    'гуппи',\n    'гупти',\n    'гуран',\n    'гурда',\n    'гурия',\n    'гуркх',\n    'гурма',\n    'гурон',\n    'гусак',\n    'гусан',\n    'гусар',\n    'гусек',\n    'гусит',\n    'гусла',\n    'гусле',\n    'гусли',\n    'гутта',\n    'гуцул',\n    'гушти',\n    'гэгэн',\n    'гэнро',\n    'гювеч',\n    'гюлеш',\n    'гюреш',\n    'гюрза',\n    'дабка',\n    'давин',\n    'давка',\n    'дадан',\n    'дайка',\n    'дайме',\n    'дайна',\n    'дайра',\n    'далер',\n    'далит',\n    'далия',\n    'даман',\n    'дамба',\n    'дамка',\n    'дамно',\n    'дампо',\n    'данио',\n    'дараф',\n    'дарик',\n    'дарси',\n    'дартс',\n    'датер',\n    'датив',\n    'даури',\n    'дафла',\n    'дафна',\n    'дацан',\n    'дацит',\n    'дверь',\n    'двояк',\n    'дебай',\n    'дебен',\n    'дебет',\n    'дебил',\n    'дебит',\n    'дебош',\n    'дебри',\n    'дебют',\n    'девиз',\n    'девка',\n    'девон',\n    'дегра',\n    'деизм',\n    'деист',\n    'декан',\n    'декор',\n    'дележ',\n    'делец',\n    'делли',\n    'демон',\n    'демос',\n    'денар',\n    'денди',\n    'деним',\n    'денье',\n    'дерби',\n    'дерен',\n    'дерма',\n    'дерть',\n    'десна',\n    'дессу',\n    'десть',\n    'детва',\n    'детка',\n    'дефис',\n    'децен',\n    'децим',\n    'децин',\n    'джайв',\n    'джаса',\n    'джати',\n    'джига',\n    'джинн',\n    'джойн',\n    'джола',\n    'джолт',\n    'джума',\n    'дзета',\n    'дзюдо',\n    'диада',\n    'диана',\n    'диван',\n    'дидим',\n    'диета',\n    'дизен',\n    'дийод',\n    'дилдо',\n    'дилей',\n    'дилен',\n    'дилер',\n    'дильс',\n    'димер',\n    'динар',\n    'динас',\n    'динат',\n    'динги',\n    'динго',\n    'динер',\n    'динит',\n    'динка',\n    'динод',\n    'диоат',\n    'диола',\n    'диоон',\n    'дипир',\n    'дирит',\n    'диско',\n    'дихас',\n    'дихта',\n    'дичок',\n    'диэдр',\n    'длань',\n    'длина',\n    'днище',\n    'добла',\n    'добор',\n    'добра',\n    'добро',\n    'довга',\n    'довод',\n    'довоз',\n    'догма',\n    'догон',\n    'догра',\n    'догри',\n    'додзе',\n    'додин',\n    'дождь',\n    'дожим',\n    'дожин',\n    'дозор',\n    'дойка',\n    'дойна',\n    'дойра',\n    'докер',\n    'долив',\n    'долма',\n    'долок',\n    'долом',\n    'домен',\n    'домер',\n    'домик',\n    'домит',\n    'домна',\n    'домол',\n    'домра',\n    'донго',\n    'донец',\n    'донка',\n    'донна',\n    'донор',\n    'донос',\n    'донум',\n    'донья',\n    'допан',\n    'досев',\n    'доска',\n    'досол',\n    'досуг',\n    'досыл',\n    'досье',\n    'доула',\n    'дофин',\n    'доход',\n    'дочка',\n    'драга',\n    'драек',\n    'драже',\n    'драйв',\n    'драка',\n    'драма',\n    'дрань',\n    'драпа',\n    'драфт',\n    'древо',\n    'дрейф',\n    'дрель',\n    'дрема',\n    'дрена',\n    'дриин',\n    'дрифт',\n    'дробь',\n    'дрова',\n    'дрога',\n    'дроги',\n    'дрожь',\n    'дрозд',\n    'дронт',\n    'дросс',\n    'дрофа',\n    'друза',\n    'друид',\n    'дрюит',\n    'дрязг',\n    'дрянь',\n    'дуала',\n    'дуаль',\n    'дуант',\n    'дубка',\n    'дубль',\n    'дубье',\n    'дувал',\n    'дуван',\n    'дудка',\n    'дудук',\n    'дужка',\n    'дузен',\n    'дукат',\n    'дукер',\n    'дулеб',\n    'дулун',\n    'думец',\n    'думка',\n    'дунит',\n    'дунст',\n    'дуоди',\n    'дуоль',\n    'дупло',\n    'дурак',\n    'дурил',\n    'дурол',\n    'дурра',\n    'дурро',\n    'дусен',\n    'дутар',\n    'дутик',\n    'дутыш',\n    'дутье',\n    'духан',\n    'дучка',\n    'душка',\n    'душок',\n    'дуэль',\n    'дхоти',\n    'дщерь',\n    'дыбка',\n    'дымка',\n    'дырка',\n    'дышло',\n    'дюбек',\n    'дюкер',\n    'дюкит',\n    'дюрен',\n    'дюрок',\n    'дюшес',\n    'дякло',\n    'дятел',\n    'евнух',\n    'еврей',\n    'егерь',\n    'егоза',\n    'ежиха',\n    'ездка',\n    'ездок',\n    'елань',\n    'емчак',\n    'емшан',\n    'енаит',\n    'еналь',\n    'еноат',\n    'еноил',\n    'ересь',\n    'ерибо',\n    'ерика',\n    'ерник',\n    'ероол',\n    'ершик',\n    'есаул',\n    'ессей',\n    'ехида',\n    'жабка',\n    'жабра',\n    'жажда',\n    'жакан',\n    'жакет',\n    'жакоб',\n    'жалон',\n    'жарка',\n    'жарма',\n    'жатва',\n    'жатка',\n    'жвало',\n    'жедин',\n    'жейра',\n    'желна',\n    'желоб',\n    'желть',\n    'желчь',\n    'жених',\n    'жеода',\n    'жердь',\n    'жерех',\n    'жерло',\n    'жеста',\n    'жесть',\n    'жетон',\n    'живец',\n    'живое',\n    'живой',\n    'живот',\n    'живье',\n    'жижка',\n    'жизнь',\n    'жилет',\n    'жилец',\n    'жилка',\n    'жилье',\n    'жират',\n    'жираф',\n    'жирши',\n    'жиряк',\n    'житие',\n    'житье',\n    'жмудь',\n    'жница',\n    'жокей',\n    'жрица',\n    'жуаль',\n    'жудец',\n    'жулан',\n    'жулик',\n    'жулье',\n    'жумар',\n    'жупан',\n    'жупел',\n    'журка',\n    'жучка',\n    'жучок',\n    'забег',\n    'забой',\n    'забор',\n    'завал',\n    'завет',\n    'завод',\n    'завоз',\n    'завуч',\n    'загар',\n    'загиб',\n    'загон',\n    'загул',\n    'задел',\n    'задир',\n    'задок',\n    'задор',\n    'заеда',\n    'заезд',\n    'зажим',\n    'зажор',\n    'зазор',\n    'зазыв',\n    'заика',\n    'заказ',\n    'закал',\n    'закат',\n    'закол',\n    'закон',\n    'закоп',\n    'закуп',\n    'закус',\n    'закят',\n    'залет',\n    'залив',\n    'зализ',\n    'залог',\n    'залом',\n    'замах',\n    'замер',\n    'замес',\n    'замет',\n    'замин',\n    'замия',\n    'замок',\n    'замор',\n    'замша',\n    'занде',\n    'зандр',\n    'занкл',\n    'занос',\n    'запад',\n    'запал',\n    'запас',\n    'запах',\n    'запев',\n    'запил',\n    'запой',\n    'запор',\n    'зарез',\n    'зарин',\n    'зарок',\n    'заруб',\n    'заряд',\n    'засев',\n    'засов',\n    'засол',\n    'засор',\n    'засос',\n    'засыл',\n    'засып',\n    'затек',\n    'затес',\n    'затея',\n    'заток',\n    'затон',\n    'затоп',\n    'затор',\n    'заумь',\n    'захаб',\n    'заход',\n    'зацеп',\n    'зачес',\n    'зачет',\n    'зачин',\n    'зашаг',\n    'защип',\n    'звено',\n    'зверь',\n    'зебра',\n    'зевок',\n    'зелот',\n    'зелье',\n    'зельц',\n    'земец',\n    'земля',\n    'зенит',\n    'зерет',\n    'зерец',\n    'зерно',\n    'зернь',\n    'зефир',\n    'зилот',\n    'зимоз',\n    'зиндж',\n    'зипун',\n    'злато',\n    'злоба',\n    'злюка',\n    'знамя',\n    'знать',\n    'зобик',\n    'золка',\n    'золон',\n    'зоман',\n    'зомби',\n    'зооид',\n    'зорит',\n    'зраза',\n    'зубан',\n    'зубец',\n    'зубок',\n    'зулец',\n    'зулус',\n    'зумпф',\n    'зуньи',\n    'зурна',\n    'зыбун',\n    'зэчка',\n    'зябра',\n    'иайдо',\n    'иваси',\n    'ивина',\n    'ивняк',\n    'иврит',\n    'игиль',\n    'игрек',\n    'игрец',\n    'игрок',\n    'игрун',\n    'идаит',\n    'идеал',\n    'идель',\n    'иджма',\n    'идиот',\n    'идоза',\n    'идома',\n    'идрил',\n    'иенит',\n    'иерей',\n    'ижица',\n    'ижора',\n    'избач',\n    'извет',\n    'извив',\n    'извод',\n    'извоз',\n    'изгиб',\n    'изгой',\n    'излет',\n    'излив',\n    'излом',\n    'измол',\n    'измор',\n    'износ',\n    'изоль',\n    'изъян',\n    'изыск',\n    'изюбр',\n    'икаит',\n    'икако',\n    'икона',\n    'икота',\n    'иксия',\n    'иктус',\n    'икура',\n    'илама',\n    'илеит',\n    'илеус',\n    'илиец',\n    'илиша',\n    'иллит',\n    'илоед',\n    'илька',\n    'имаго',\n    'имади',\n    'имама',\n    'имейл',\n    'имидж',\n    'инвар',\n    'ингуш',\n    'индан',\n    'индат',\n    'индау',\n    'инден',\n    'индид',\n    'индий',\n    'индио',\n    'индит',\n    'индол',\n    'индон',\n    'индри',\n    'индус',\n    'индюк',\n    'инжир',\n    'инион',\n    'инкор',\n    'инкуб',\n    'иноат',\n    'инпут',\n    'интим',\n    'инуит',\n    'инула',\n    'инфак',\n    'иозис',\n    'иолит',\n    'иомуд',\n    'ионий',\n    'ионик',\n    'ионит',\n    'ионол',\n    'ионон',\n    'иофоб',\n    'иоцит',\n    'иппон',\n    'иприт',\n    'ирбис',\n    'ирена',\n    'ирмос',\n    'искра',\n    'искус',\n    'ислам',\n    'исмин',\n    'испуг',\n    'иссоп',\n    'истец',\n    'истод',\n    'исток',\n    'исход',\n    'итоит',\n    'иудей',\n    'ифрит',\n    'ихрам',\n    'ициан',\n    'ишиас',\n    'ишпан',\n    'ишрак',\n    'ишхан',\n    'йенец',\n    'йогин',\n    'йодат',\n    'йодид',\n    'йодил',\n    'йодин',\n    'йодит',\n    'йодль',\n    'йодол',\n    'йодюр',\n    'йомен',\n    'йошта',\n    'кабак',\n    'кабан',\n    'кабат',\n    'кабил',\n    'кабир',\n    'кабре',\n    'кабул',\n    'кавал',\n    'кавия',\n    'кагал',\n    'каган',\n    'кагат',\n    'кагор',\n    'кадет',\n    'кадиш',\n    'кадка',\n    'кадло',\n    'кадры',\n    'кадык',\n    'казак',\n    'казан',\n    'казах',\n    'казна',\n    'казнь',\n    'казус',\n    'кайен',\n    'кайин',\n    'кайка',\n    'кайла',\n    'кайло',\n    'кайма',\n    'кайра',\n    'кайса',\n    'кайчи',\n    'какао',\n    'калам',\n    'калан',\n    'калао',\n    'калах',\n    'калач',\n    'калаш',\n    'калий',\n    'калка',\n    'калла',\n    'калот',\n    'калта',\n    'калым',\n    'калья',\n    'камба',\n    'камео',\n    'камец',\n    'камея',\n    'камин',\n    'камка',\n    'кампа',\n    'камса',\n    'камус',\n    'камча',\n    'камыш',\n    'канак',\n    'канал',\n    'канат',\n    'канва',\n    'канец',\n    'канза',\n    'канзу',\n    'канит',\n    'канна',\n    'канон',\n    'каноэ',\n    'канун',\n    'канфа',\n    'канюк',\n    'капеж',\n    'капер',\n    'капля',\n    'капок',\n    'капор',\n    'капот',\n    'каппа',\n    'капри',\n    'капса',\n    'капча',\n    'каран',\n    'карас',\n    'карат',\n    'карга',\n    'карго',\n    'карда',\n    'карел',\n    'карен',\n    'кариб',\n    'кария',\n    'карла',\n    'карло',\n    'карма',\n    'карра',\n    'карри',\n    'карст',\n    'карта',\n    'карча',\n    'касба',\n    'касик',\n    'каска',\n    'каско',\n    'касог',\n    'касса',\n    'каста',\n    'катар',\n    'катер',\n    'катет',\n    'катин',\n    'катла',\n    'катля',\n    'катод',\n    'каток',\n    'катта',\n    'катун',\n    'катык',\n    'катыш',\n    'кауза',\n    'каури',\n    'кафир',\n    'кахец',\n    'кахон',\n    'кацик',\n    'качим',\n    'качин',\n    'качка',\n    'качок',\n    'качча',\n    'кашка',\n    'кашне',\n    'кашпо',\n    'кашуб',\n    'каюта',\n    'квадр',\n    'квант',\n    'кварк',\n    'кварц',\n    'квача',\n    'квени',\n    'квест',\n    'квилт',\n    'кволл',\n    'квота',\n    'кебаб',\n    'кегль',\n    'кегля',\n    'кедди',\n    'кедет',\n    'кедец',\n    'кезец',\n    'кейвы',\n    'кейит',\n    'кекит',\n    'кекчи',\n    'келпи',\n    'кельт',\n    'келья',\n    'кенар',\n    'кенаф',\n    'кепка',\n    'керес',\n    'керит',\n    'керма',\n    'кетен',\n    'кетил',\n    'кетин',\n    'кетоз',\n    'кетол',\n    'кетон',\n    'кефир',\n    'кечак',\n    'кечуа',\n    'кешью',\n    'кианг',\n    'кибла',\n    'кибуц',\n    'кивер',\n    'кивок',\n    'кидар',\n    'кидас',\n    'кидка',\n    'кидус',\n    'кижуч',\n    'кизил',\n    'кизяк',\n    'кикер',\n    'килец',\n    'килик',\n    'килим',\n    'кимак',\n    'кимвр',\n    'кимчи',\n    'кинга',\n    'кинед',\n    'кинза',\n    'киник',\n    'кинин',\n    'киноа',\n    'кинто',\n    'киоск',\n    'кипер',\n    'кирея',\n    'кирза',\n    'кирка',\n    'кирха',\n    'кисас',\n    'кисет',\n    'кисея',\n    'кисси',\n    'киста',\n    'кисть',\n    'китит',\n    'кифоз',\n    'кичка',\n    'кишка',\n    'клаве',\n    'кладь',\n    'клака',\n    'кларк',\n    'класс',\n    'клатч',\n    'клеол',\n    'клерк',\n    'клерс',\n    'клест',\n    'клеть',\n    'клефт',\n    'клехо',\n    'клещи',\n    'клика',\n    'клико',\n    'кликс',\n    'клинт',\n    'клинч',\n    'клипа',\n    'клипп',\n    'клипс',\n    'клица',\n    'клише',\n    'клопс',\n    'клоун',\n    'клупп',\n    'клуша',\n    'клюка',\n    'клюфт',\n    'кляча',\n    'кнель',\n    'кнехт',\n    'книга',\n    'кница',\n    'князь',\n    'коала',\n    'коата',\n    'коати',\n    'кобан',\n    'кобея',\n    'кобза',\n    'кобия',\n    'кобол',\n    'кобра',\n    'кобуз',\n    'кобыз',\n    'ковар',\n    'ковен',\n    'ковер',\n    'ковит',\n    'ковка',\n    'когай',\n    'когия',\n    'кодак',\n    'кодек',\n    'кодер',\n    'кодон',\n    'кожан',\n    'кожух',\n    'кожье',\n    'козел',\n    'козлы',\n    'кознь',\n    'коипу',\n    'койка',\n    'койне',\n    'койот',\n    'кокер',\n    'кокет',\n    'кокни',\n    'кокон',\n    'кокор',\n    'кокос',\n    'кокур',\n    'колба',\n    'колер',\n    'колет',\n    'колея',\n    'колин',\n    'колит',\n    'колка',\n    'колли',\n    'колло',\n    'колоб',\n    'колок',\n    'колон',\n    'колос',\n    'колун',\n    'колхи',\n    'колье',\n    'кольт',\n    'колюр',\n    'комар',\n    'комби',\n    'комбо',\n    'комик',\n    'комит',\n    'комма',\n    'комми',\n    'комод',\n    'комок',\n    'комуз',\n    'конга',\n    'конго',\n    'кондо',\n    'конек',\n    'конец',\n    'конзо',\n    'коник',\n    'конит',\n    'конка',\n    'консо',\n    'конто',\n    'конус',\n    'конфи',\n    'конха',\n    'конюх',\n    'копал',\n    'копан',\n    'копач',\n    'копер',\n    'копие',\n    'копир',\n    'копис',\n    'копия',\n    'копка',\n    'копна',\n    'коппа',\n    'копра',\n    'копун',\n    'копыл',\n    'копье',\n    'корат',\n    'корба',\n    'корда',\n    'корка',\n    'корма',\n    'короа',\n    'короб',\n    'корсо',\n    'корча',\n    'корье',\n    'коряк',\n    'косач',\n    'косец',\n    'косма',\n    'косой',\n    'косок',\n    'кость',\n    'косяк',\n    'котел',\n    'котик',\n    'кофан',\n    'кофта',\n    'кохит',\n    'кохия',\n    'кочан',\n    'кочка',\n    'кошер',\n    'кошка',\n    'кошма',\n    'кошок',\n    'кошти',\n    'кощей',\n    'коэль',\n    'крабб',\n    'крага',\n    'кража',\n    'краза',\n    'крайт',\n    'кракс',\n    'краля',\n    'крамп',\n    'кранч',\n    'крапп',\n    'краса',\n    'крауч',\n    'крафт',\n    'кредл',\n    'кредо',\n    'крезь',\n    'крень',\n    'креод',\n    'креол',\n    'крепь',\n    'кресс',\n    'крест',\n    'криль',\n    'крион',\n    'крица',\n    'кроат',\n    'кробу',\n    'кровь',\n    'кроки',\n    'кроль',\n    'крона',\n    'кросс',\n    'крота',\n    'кроха',\n    'кроше',\n    'круиз',\n    'крупа',\n    'круча',\n    'крыло',\n    'крыса',\n    'крыша',\n    'ксоан',\n    'ктырь',\n    'кубан',\n    'кубба',\n    'кубик',\n    'кубит',\n    'кубок',\n    'кубыз',\n    'кувас',\n    'кувез',\n    'кудри',\n    'кузен',\n    'кузов',\n    'кукан',\n    'кукер',\n    'кукиш',\n    'кукла',\n    'кукри',\n    'куксу',\n    'кукша',\n    'кулаж',\n    'кулак',\n    'кулан',\n    'кулек',\n    'кулер',\n    'кулет',\n    'кулеш',\n    'кулик',\n    'кулич',\n    'кулия',\n    'кулон',\n    'кульм',\n    'культ',\n    'кумай',\n    'куман',\n    'кумач',\n    'кумжа',\n    'кумил',\n    'кумин',\n    'кумир',\n    'кумол',\n    'кумык',\n    'кумыс',\n    'кунак',\n    'купаж',\n    'купец',\n    'купля',\n    'купол',\n    'купон',\n    'купор',\n    'кураж',\n    'курай',\n    'курак',\n    'кураш',\n    'курба',\n    'курес',\n    'курет',\n    'куреш',\n    'курин',\n    'курия',\n    'курок',\n    'курол',\n    'курос',\n    'курсы',\n    'курта',\n    'курум',\n    'курут',\n    'куруц',\n    'куруш',\n    'курши',\n    'куряк',\n    'куряш',\n    'кусок',\n    'кутас',\n    'кутеж',\n    'кутин',\n    'кутис',\n    'кутия',\n    'куток',\n    'кутра',\n    'кутум',\n    'кутья',\n    'кутюм',\n    'куфея',\n    'куфия',\n    'кухня',\n    'кучер',\n    'кучия',\n    'кушак',\n    'кхаси',\n    'кхмер',\n    'кхонд',\n    'кылыы',\n    'кэмпо',\n    'кэндо',\n    'кэроб',\n    'кэтти',\n    'кювет',\n    'кюйши',\n    'кюлот',\n    'кюрий',\n    'кюрин',\n    'кюрит',\n    'кюсле',\n    'кюфта',\n    'кяриз',\n    'лабаз',\n    'лабео',\n    'лабет',\n    'лаваж',\n    'лаваш',\n    'лавис',\n    'лавка',\n    'лавра',\n    'лагер',\n    'лагид',\n    'лагун',\n    'ладан',\n    'ладин',\n    'ладья',\n    'лазер',\n    'лазка',\n    'лайба',\n    'лайка',\n    'лакей',\n    'лакец',\n    'лакса',\n    'лалич',\n    'ламин',\n    'лампа',\n    'ламут',\n    'ланго',\n    'ланда',\n    'ландо',\n    'ланды',\n    'ланка',\n    'ланце',\n    'лапка',\n    'лапта',\n    'лапша',\n    'ларва',\n    'ларга',\n    'ларго',\n    'ларек',\n    'ларец',\n    'ларич',\n    'ларра',\n    'ласка',\n    'лассо',\n    'латес',\n    'латин',\n    'латит',\n    'латка',\n    'латте',\n    'латук',\n    'латыш',\n    'латьи',\n    'лауда',\n    'лафет',\n    'лафит',\n    'лахар',\n    'лахта',\n    'лаццо',\n    'лачка',\n    'лебда',\n    'левак',\n    'леван',\n    'левин',\n    'левит',\n    'левша',\n    'легат',\n    'легаш',\n    'легуа',\n    'ледий',\n    'ледин',\n    'лежак',\n    'лежка',\n    'лейас',\n    'лейбл',\n    'лейка',\n    'лейма',\n    'лекаж',\n    'лекиф',\n    'лекса',\n    'лемех',\n    'лемки',\n    'лемма',\n    'лемур',\n    'ленец',\n    'ленка',\n    'ленок',\n    'лента',\n    'ленто',\n    'леоне',\n    'лепет',\n    'лепка',\n    'лепра',\n    'лепта',\n    'лепча',\n    'лерез',\n    'лерка',\n    'леска',\n    'лесса',\n    'лесть',\n    'лесха',\n    'летка',\n    'леток',\n    'летун',\n    'леший',\n    'лжица',\n    'лиаза',\n    'лиана',\n    'лиард',\n    'либор',\n    'либра',\n    'ливан',\n    'ливер',\n    'ливка',\n    'лигур',\n    'лидар',\n    'лидер',\n    'лидин',\n    'лидит',\n    'лидор',\n    'лизат',\n    'лизил',\n    'лизин',\n    'лизис',\n    'лизол',\n    'лизун',\n    'ликей',\n    'ликер',\n    'ликит',\n    'ликод',\n    'лилия',\n    'лиман',\n    'лимба',\n    'лимбо',\n    'лимес',\n    'лимец',\n    'лимит',\n    'лимма',\n    'лимон',\n    'лимфа',\n    'линек',\n    'линза',\n    'линин',\n    'линит',\n    'линия',\n    'липец',\n    'липид',\n    'липоз',\n    'липси',\n    'лирик',\n    'литас',\n    'литер',\n    'литий',\n    'литик',\n    'литин',\n    'лития',\n    'литка',\n    'литоз',\n    'литол',\n    'литра',\n    'литье',\n    'лихач',\n    'лихва',\n    'лихен',\n    'лихия',\n    'лицей',\n    'лицин',\n    'личер',\n    'лишай',\n    'лишек',\n    'лоаоз',\n    'лобан',\n    'лобби',\n    'лобик',\n    'лобин',\n    'лобио',\n    'лобит',\n    'лобия',\n    'лобок',\n    'лобот',\n    'ловец',\n    'ловля',\n    'ловоа',\n    'логик',\n    'логин',\n    'лоден',\n    'лодка',\n    'ложка',\n    'ложок',\n    'локва',\n    'локер',\n    'локон',\n    'локус',\n    'ломка',\n    'лонжа',\n    'лопух',\n    'лорел',\n    'лорум',\n    'лоток',\n    'лотос',\n    'лофин',\n    'лохии',\n    'лохмы',\n    'лоция',\n    'лошак',\n    'лубок',\n    'лузга',\n    'лузец',\n    'лукно',\n    'лукум',\n    'лунда',\n    'лунит',\n    'лунка',\n    'лупан',\n    'лупка',\n    'луток',\n    'лухья',\n    'лучок',\n    'лушеи',\n    'лыжня',\n    'лысун',\n    'лычка',\n    'льяло',\n    'любер',\n    'любка',\n    'люгер',\n    'людус',\n    'люмен',\n    'люнет',\n    'люпин',\n    'люпус',\n    'люрик',\n    'люстр',\n    'лютик',\n    'лютит',\n    'лютич',\n    'лютня',\n    'люцит',\n    'лябан',\n    'ляжка',\n    'лямка',\n    'ляпис',\n    'ляссе',\n    'ляшка',\n    'маака',\n    'мабуб',\n    'мабуи',\n    'мавка',\n    'мавля',\n    'магар',\n    'магик',\n    'магия',\n    'магма',\n    'магог',\n    'магот',\n    'мадам',\n    'мадия',\n    'мажор',\n    'мазар',\n    'мазер',\n    'мазка',\n    'мазня',\n    'мазок',\n    'мазур',\n    'мазут',\n    'майду',\n    'майка',\n    'майко',\n    'майна',\n    'майор',\n    'макам',\n    'макао',\n    'макет',\n    'маком',\n    'макси',\n    'макуа',\n    'малат',\n    'малек',\n    'малео',\n    'малец',\n    'малик',\n    'малка',\n    'малли',\n    'малыш',\n    'мальм',\n    'мальт',\n    'маляр',\n    'мамак',\n    'маман',\n    'мамба',\n    'мамбо',\n    'мамец',\n    'мамка',\n    'манап',\n    'манас',\n    'манат',\n    'манга',\n    'манго',\n    'манде',\n    'манеб',\n    'манеж',\n    'манер',\n    'манец',\n    'мание',\n    'мания',\n    'манка',\n    'манки',\n    'манко',\n    'манкс',\n    'манна',\n    'манок',\n    'манор',\n    'манси',\n    'манта',\n    'манто',\n    'манту',\n    'манул',\n    'мануш',\n    'маори',\n    'марае',\n    'марал',\n    'маран',\n    'мараэ',\n    'марго',\n    'маржа',\n    'марка',\n    'марко',\n    'марку',\n    'марля',\n    'марши',\n    'масаи',\n    'маска',\n    'масло',\n    'масон',\n    'масса',\n    'массе',\n    'масть',\n    'матка',\n    'матты',\n    'мауля',\n    'маунд',\n    'мафит',\n    'мафия',\n    'махан',\n    'махди',\n    'махра',\n    'махры',\n    'мацис',\n    'мачок',\n    'мачта',\n    'мбоши',\n    'меала',\n    'мегом',\n    'медиа',\n    'медик',\n    'медио',\n    'медия',\n    'медли',\n    'медок',\n    'медье',\n    'медяк',\n    'мезга',\n    'мезил',\n    'мезон',\n    'мейоз',\n    'мелба',\n    'мелем',\n    'мелик',\n    'мелис',\n    'мелит',\n    'мелия',\n    'мелок',\n    'мелон',\n    'мелос',\n    'мелье',\n    'менаж',\n    'менде',\n    'менек',\n    'мензи',\n    'менид',\n    'мерва',\n    'мерет',\n    'мерея',\n    'мерин',\n    'мерка',\n    'мерло',\n    'мероу',\n    'месна',\n    'месса',\n    'место',\n    'месть',\n    'месье',\n    'месяц',\n    'метан',\n    'метек',\n    'метен',\n    'метиз',\n    'метик',\n    'метил',\n    'метин',\n    'метис',\n    'метка',\n    'метла',\n    'метод',\n    'метол',\n    'метоп',\n    'метро',\n    'меццо',\n    'мечта',\n    'мешка',\n    'мешок',\n    'мивок',\n    'мигас',\n    'мигма',\n    'мидия',\n    'мизер',\n    'миква',\n    'микоз',\n    'микст',\n    'милая',\n    'милон',\n    'милый',\n    'милье',\n    'мимик',\n    'минаи',\n    'минал',\n    'минер',\n    'минет',\n    'минец',\n    'минея',\n    'миний',\n    'миним',\n    'минор',\n    'минус',\n    'миома',\n    'мираб',\n    'мираж',\n    'мирза',\n    'мирин',\n    'мирок',\n    'мирон',\n    'мирра',\n    'миска',\n    'мисла',\n    'митоз',\n    'митра',\n    'михна',\n    'мишка',\n    'мнонг',\n    'мобер',\n    'могар',\n    'могол',\n    'могул',\n    'могур',\n    'модал',\n    'модем',\n    'модий',\n    'модус',\n    'модфа',\n    'моизм',\n    'моист',\n    'мойва',\n    'мойка',\n    'мойра',\n    'мокет',\n    'мокик',\n    'мокко',\n    'мокой',\n    'мокра',\n    'мокса',\n    'мокша',\n    'молва',\n    'молка',\n    'молот',\n    'молох',\n    'моляр',\n    'момме',\n    'момот',\n    'монах',\n    'монго',\n    'мондо',\n    'мония',\n    'моном',\n    'мопед',\n    'моран',\n    'морда',\n    'морея',\n    'морин',\n    'морит',\n    'мория',\n    'мороз',\n    'морок',\n    'морон',\n    'морфа',\n    'морцо',\n    'моряк',\n    'мосит',\n    'мосол',\n    'мосье',\n    'мотал',\n    'мотет',\n    'мотив',\n    'мотка',\n    'мотня',\n    'моток',\n    'мотор',\n    'мотто',\n    'мофет',\n    'мохер',\n    'мохит',\n    'мохна',\n    'мочка',\n    'мошка',\n    'мошна',\n    'мубах',\n    'мугам',\n    'мудра',\n    'мужик',\n    'музей',\n    'мукор',\n    'мулао',\n    'мулат',\n    'мулла',\n    'мульк',\n    'муляж',\n    'мумие',\n    'мумия',\n    'мунго',\n    'мунгу',\n    'мунда',\n    'мунит',\n    'мураш',\n    'мурза',\n    'мурин',\n    'мурит',\n    'мурка',\n    'мурук',\n    'мурья',\n    'мусат',\n    'мусор',\n    'мутар',\n    'мутон',\n    'мутул',\n    'муфта',\n    'мухур',\n    'муцин',\n    'мушар',\n    'мушир',\n    'мушка',\n    'мцыри',\n    'мысль',\n    'мысок',\n    'мытье',\n    'мышей',\n    'мышка',\n    'мышца',\n    'мэлан',\n    'мэрия',\n    'мэрон',\n    'мюзет',\n    'мюзле',\n    'мюрид',\n    'мюсли',\n    'мякиш',\n    'мялка',\n    'мямля',\n    'мясцо',\n    'мятеж',\n    'мятие',\n    'мятье',\n    'мячик',\n    'набам',\n    'набат',\n    'набег',\n    'набла',\n    'набоб',\n    'набор',\n    'наваб',\n    'навал',\n    'навар',\n    'нават',\n    'навах',\n    'навес',\n    'навет',\n    'навис',\n    'навит',\n    'навоз',\n    'навой',\n    'навык',\n    'наган',\n    'нагар',\n    'нагиб',\n    'нагон',\n    'нагул',\n    'надел',\n    'надир',\n    'надой',\n    'надув',\n    'наезд',\n    'нажиг',\n    'нажим',\n    'нажин',\n    'найра',\n    'наказ',\n    'накал',\n    'накат',\n    'накид',\n    'накол',\n    'накос',\n    'накра',\n    'налед',\n    'налеп',\n    'налет',\n    'налив',\n    'налим',\n    'налог',\n    'намаз',\n    'намек',\n    'намет',\n    'намец',\n    'намин',\n    'намка',\n    'намол',\n    'намыв',\n    'нанди',\n    'нанду',\n    'нанка',\n    'нанос',\n    'напев',\n    'напой',\n    'напор',\n    'наппа',\n    'нарды',\n    'нарез',\n    'народ',\n    'нарта',\n    'нарыв',\n    'наряд',\n    'насад',\n    'насос',\n    'насса',\n    'насып',\n    'натек',\n    'натес',\n    'натир',\n    'натяг',\n    'наука',\n    'нафта',\n    'нахал',\n    'наход',\n    'нахур',\n    'нация',\n    'начес',\n    'начет',\n    'начин',\n    'начос',\n    'наяда',\n    'нгала',\n    'нгони',\n    'невар',\n    'невер',\n    'невма',\n    'невод',\n    'невус',\n    'негус',\n    'недра',\n    'недуг',\n    'нейит',\n    'немая',\n    'немец',\n    'немич',\n    'немка',\n    'немой',\n    'ненец',\n    'нения',\n    'ненка',\n    'непер',\n    'непот',\n    'нерил',\n    'нерка',\n    'нерол',\n    'нерпа',\n    'несун',\n    'несяк',\n    'нетто',\n    'неуют',\n    'нефть',\n    'нечет',\n    'нзима',\n    'нивоз',\n    'нидус',\n    'низам',\n    'низин',\n    'низка',\n    'низок',\n    'никаб',\n    'никах',\n    'никса',\n    'нилас',\n    'нилит',\n    'нилот',\n    'нилум',\n    'нимат',\n    'нимец',\n    'нимит',\n    'нимфа',\n    'нирал',\n    'нисан',\n    'нисса',\n    'нитка',\n    'нитон',\n    'ничья',\n    'нишец',\n    'нищая',\n    'нищий',\n    'нобль',\n    'новик',\n    'новус',\n    'ногат',\n    'ногул',\n    'нодья',\n    'ножик',\n    'ножка',\n    'ножны',\n    'нойон',\n    'нокке',\n    'номад',\n    'номен',\n    'номер',\n    'нонан',\n    'нонен',\n    'нонет',\n    'нонил',\n    'нонин',\n    'нопол',\n    'норит',\n    'нория',\n    'норка',\n    'норма',\n    'норов',\n    'носач',\n    'носик',\n    'носка',\n    'носок',\n    'нотис',\n    'ноэль',\n    'ноэма',\n    'нубук',\n    'нудеж',\n    'нужда',\n    'нукер',\n    'нумик',\n    'нураг',\n    'нутка',\n    'нутро',\n    'нырок',\n    'нытик',\n    'нытье',\n    'ньюфи',\n    'ньяик',\n    'ньяла',\n    'нэцке',\n    'нюанс',\n    'нюхач',\n    'оазис',\n    'обвал',\n    'обвес',\n    'обвив',\n    'обвод',\n    'обвоз',\n    'обгон',\n    'обдел',\n    'обдир',\n    'обдув',\n    'обжиг',\n    'обжим',\n    'обжин',\n    'обзол',\n    'обзор',\n    'обида',\n    'обкат',\n    'обком',\n    'обкос',\n    'облет',\n    'облик',\n    'облов',\n    'облог',\n    'облой',\n    'облом',\n    'обман',\n    'обмен',\n    'обмер',\n    'обмет',\n    'обмин',\n    'обмол',\n    'обмыв',\n    'обнос',\n    'обора',\n    'образ',\n    'обрат',\n    'обрез',\n    'оброк',\n    'оброн',\n    'обруб',\n    'обруч',\n    'обрыв',\n    'обряд',\n    'обсев',\n    'обувь',\n    'обуза',\n    'обход',\n    'обчет',\n    'объем',\n    'обыск',\n    'овизм',\n    'овина',\n    'овист',\n    'овоид',\n    'овраг',\n    'овсец',\n    'овсюг',\n    'овула',\n    'овчар',\n    'огарь',\n    'огива',\n    'огони',\n    'огонь',\n    'огрех',\n    'одаль',\n    'оддит',\n    'одеон',\n    'одурь',\n    'оелит',\n    'ожива',\n    'ожика',\n    'озена',\n    'озеро',\n    'озимь',\n    'озноб',\n    'оидий',\n    'ойлер',\n    'ойран',\n    'ойрат',\n    'ойрот',\n    'окаем',\n    'окапи',\n    'окара',\n    'окарь',\n    'океан',\n    'окись',\n    'оклад',\n    'оклик',\n    'оковы',\n    'окоем',\n    'окорм',\n    'окрас',\n    'окрик',\n    'окрол',\n    'округ',\n    'оксан',\n    'оксер',\n    'оксет',\n    'оксид',\n    'оксил',\n    'оксим',\n    'оксин',\n    'оксол',\n    'оксон',\n    'октан',\n    'октен',\n    'октет',\n    'октил',\n    'октин',\n    'октод',\n    'октол',\n    'окунь',\n    'олеат',\n    'олеил',\n    'олеин',\n    'олень',\n    'олеум',\n    'олива',\n    'олимп',\n    'олифа',\n    'олово',\n    'олтен',\n    'олуша',\n    'ольха',\n    'омаха',\n    'омега',\n    'омела',\n    'омето',\n    'омлет',\n    'оммаж',\n    'оммин',\n    'омуль',\n    'онагр',\n    'оникс',\n    'онинг',\n    'онкоз',\n    'онмун',\n    'онуча',\n    'ончиа',\n    'оолит',\n    'оолог',\n    'оофаг',\n    'ооцит',\n    'опала',\n    'опара',\n    'опека',\n    'опера',\n    'опиат',\n    'опись',\n    'опиум',\n    'оплот',\n    'оплыв',\n    'опоек',\n    'опока',\n    'опора',\n    'опрос',\n    'опсин',\n    'оптик',\n    'опхоз',\n    'опция',\n    'орава',\n    'орало',\n    'ораон',\n    'орарь',\n    'орбис',\n    'орган',\n    'оргия',\n    'оргон',\n    'орден',\n    'ордер',\n    'ореид',\n    'ореол',\n    'ориби',\n    'орикс',\n    'оркан',\n    'орлан',\n    'орлец',\n    'орлик',\n    'орлит',\n    'орлоп',\n    'орляк',\n    'орнат',\n    'орсин',\n    'ортез',\n    'ортит',\n    'ортоз',\n    'орфик',\n    'орхит',\n    'орцин',\n    'оршад',\n    'осада',\n    'оседж',\n    'осень',\n    'осетр',\n    'осина',\n    'оскал',\n    'ослик',\n    'ослоп',\n    'осляк',\n    'осман',\n    'осмат',\n    'осмий',\n    'осмия',\n    'осмол',\n    'осмос',\n    'особа',\n    'особь',\n    'осоед',\n    'осока',\n    'остан',\n    'осташ',\n    'остит',\n    'остов',\n    'остоз',\n    'остол',\n    'остяк',\n    'осыпь',\n    'отава',\n    'отара',\n    'отбел',\n    'отбив',\n    'отбой',\n    'отбор',\n    'отвал',\n    'отвар',\n    'отвес',\n    'ответ',\n    'отвод',\n    'отвоз',\n    'отгиб',\n    'отгон',\n    'отгул',\n    'отдел',\n    'отдух',\n    'отдых',\n    'отель',\n    'отжиг',\n    'отжим',\n    'отзол',\n    'отзыв',\n    'отказ',\n    'откат',\n    'откол',\n    'откос',\n    'откуп',\n    'откус',\n    'отлет',\n    'отлив',\n    'отлов',\n    'отлуп',\n    'отмах',\n    'отмер',\n    'относ',\n    'отоми',\n    'отпад',\n    'отпал',\n    'отпор',\n    'отрез',\n    'отрог',\n    'отрок',\n    'отруб',\n    'отрыв',\n    'отряд',\n    'отсев',\n    'отсек',\n    'отсос',\n    'оттек',\n    'отток',\n    'отход',\n    'отцеп',\n    'отчал',\n    'отчет',\n    'отчим',\n    'отшиб',\n    'отщеп',\n    'отъем',\n    'оулец',\n    'офеня',\n    'офиаз',\n    'офихт',\n    'офорт',\n    'офрис',\n    'офсет',\n    'офуро',\n    'офшор',\n    'охват',\n    'охота',\n    'очава',\n    'очерк',\n    'очкур',\n    'очник',\n    'ошеек',\n    'ощупь',\n    'павин',\n    'пагон',\n    'пагур',\n    'падеж',\n    'падре',\n    'падуб',\n    'падья',\n    'пайба',\n    'пайза',\n    'пайка',\n    'пайол',\n    'пайса',\n    'пайют',\n    'пакер',\n    'пакет',\n    'пакля',\n    'палас',\n    'палач',\n    'палаш',\n    'палех',\n    'палец',\n    'палий',\n    'палия',\n    'палка',\n    'палла',\n    'палму',\n    'пампа',\n    'панаш',\n    'панда',\n    'панер',\n    'панир',\n    'панке',\n    'панна',\n    'панно',\n    'панты',\n    'панус',\n    'паныч',\n    'панье',\n    'панья',\n    'паоло',\n    'папец',\n    'папка',\n    'парад',\n    'параф',\n    'парез',\n    'парео',\n    'парик',\n    'пария',\n    'парка',\n    'парма',\n    'парня',\n    'парод',\n    'паром',\n    'парта',\n    'парти',\n    'парус',\n    'парфе',\n    'парча',\n    'парша',\n    'пасма',\n    'пасмо',\n    'пассе',\n    'паста',\n    'пасть',\n    'пасха',\n    'пасюк',\n    'патан',\n    'патас',\n    'паташ',\n    'патер',\n    'патет',\n    'патио',\n    'патра',\n    'патуа',\n    'пауза',\n    'пафос',\n    'пахви',\n    'пахит',\n    'пахса',\n    'пахта',\n    'пацан',\n    'пачка',\n    'пачук',\n    'пашня',\n    'певец',\n    'певун',\n    'пеган',\n    'пегас',\n    'пегаш',\n    'пейот',\n    'пекан',\n    'пекло',\n    'пелеа',\n    'пелит',\n    'пелог',\n    'пелот',\n    'пелта',\n    'пелям',\n    'пемза',\n    'пемон',\n    'пенал',\n    'пенам',\n    'пенге',\n    'пенго',\n    'пенек',\n    'пение',\n    'пенис',\n    'пенка',\n    'пенни',\n    'пеняз',\n    'пепел',\n    'пепси',\n    'перга',\n    'перед',\n    'перец',\n    'перит',\n    'перка',\n    'перко',\n    'пермь',\n    'перно',\n    'перси',\n    'перст',\n    'песец',\n    'песнь',\n    'песня',\n    'песок',\n    'песто',\n    'петаз',\n    'петит',\n    'петля',\n    'петух',\n    'печец',\n    'печка',\n    'пешва',\n    'пешец',\n    'пеший',\n    'пешка',\n    'пешня',\n    'пиала',\n    'пиано',\n    'пигон',\n    'пижма',\n    'пижон',\n    'пикан',\n    'пикап',\n    'пикер',\n    'пикет',\n    'пикон',\n    'пикси',\n    'пикша',\n    'пилав',\n    'пилея',\n    'пилит',\n    'пилка',\n    'пилон',\n    'пилот',\n    'пилум',\n    'пиляр',\n    'пинан',\n    'пинас',\n    'пинго',\n    'пинен',\n    'пинит',\n    'пиния',\n    'пинка',\n    'пинна',\n    'пинок',\n    'пинол',\n    'пинта',\n    'пипка',\n    'пиран',\n    'пират',\n    'пирен',\n    'пирин',\n    'пирит',\n    'пирке',\n    'пирог',\n    'пирон',\n    'пироп',\n    'писец',\n    'писун',\n    'питар',\n    'питон',\n    'питта',\n    'питха',\n    'питье',\n    'пифия',\n    'пифос',\n    'пихта',\n    'пицен',\n    'пицит',\n    'пицца',\n    'пищик',\n    'плавт',\n    'плавь',\n    'плаке',\n    'пламя',\n    'планш',\n    'пласт',\n    'плата',\n    'плато',\n    'плаун',\n    'плаха',\n    'плебс',\n    'плева',\n    'плеер',\n    'плеея',\n    'племя',\n    'плена',\n    'плеск',\n    'плеть',\n    'плехт',\n    'плечо',\n    'плешь',\n    'плинт',\n    'плита',\n    'плица',\n    'плока',\n    'плоть',\n    'плохо',\n    'побег',\n    'побои',\n    'побор',\n    'повал',\n    'повар',\n    'повет',\n    'повод',\n    'повоз',\n    'повой',\n    'погиб',\n    'погон',\n    'подий',\n    'подир',\n    'подол',\n    'поезд',\n    'пожар',\n    'пожня',\n    'пожог',\n    'позем',\n    'позер',\n    'позор',\n    'позыв',\n    'поиск',\n    'пойка',\n    'пойло',\n    'пойма',\n    'пойнт',\n    'показ',\n    'покат',\n    'покер',\n    'покой',\n    'покос',\n    'покус',\n    'полаз',\n    'полба',\n    'полет',\n    'полив',\n    'полиз',\n    'полик',\n    'полип',\n    'полир',\n    'полис',\n    'полия',\n    'полка',\n    'полог',\n    'полоз',\n    'полок',\n    'полом',\n    'полон',\n    'полье',\n    'полюс',\n    'поляк',\n    'помак',\n    'помет',\n    'помин',\n    'помои',\n    'помол',\n    'помор',\n    'помпа',\n    'понго',\n    'понит',\n    'понор',\n    'понос',\n    'понсо',\n    'понту',\n    'понур',\n    'пончо',\n    'понюх',\n    'попка',\n    'попса',\n    'порез',\n    'порей',\n    'порин',\n    'порка',\n    'порно',\n    'порог',\n    'порок',\n    'порох',\n    'порса',\n    'порск',\n    'порто',\n    'поруб',\n    'порча',\n    'порыв',\n    'посад',\n    'посев',\n    'посол',\n    'посох',\n    'посул',\n    'посыл',\n    'потаж',\n    'потай',\n    'поташ',\n    'потек',\n    'потир',\n    'поток',\n    'потоп',\n    'поттл',\n    'потто',\n    'потяг',\n    'поход',\n    'почва',\n    'почет',\n    'почин',\n    'почка',\n    'почта',\n    'пошиб',\n    'пошив',\n    'поэма',\n    'право',\n    'прайд',\n    'прайс',\n    'прана',\n    'пранг',\n    'пранк',\n    'праща',\n    'прево',\n    'прель',\n    'преон',\n    'пресс',\n    'прета',\n    'прием',\n    'прима',\n    'принт',\n    'принц',\n    'прион',\n    'приор',\n    'причт',\n    'приют',\n    'проба',\n    'проем',\n    'проза',\n    'пропс',\n    'просо',\n    'профи',\n    'прусс',\n    'пруто',\n    'прыск',\n    'прыть',\n    'прядь',\n    'пряжа',\n    'пряха',\n    'псарь',\n    'псина',\n    'псица',\n    'псише',\n    'псоит',\n    'птаха',\n    'птица',\n    'пуант',\n    'пугач',\n    'пуджа',\n    'пудра',\n    'пузан',\n    'пулка',\n    'пульс',\n    'пульт',\n    'пунан',\n    'пункт',\n    'пунто',\n    'пупок',\n    'пурга',\n    'пурин',\n    'пурка',\n    'путец',\n    'путик',\n    'путля',\n    'путти',\n    'путук',\n    'пучок',\n    'пушка',\n    'пушок',\n    'пушта',\n    'пушту',\n    'пчела',\n    'пшено',\n    'пыжик',\n    'пырей',\n    'пытка',\n    'пышка',\n    'пьеза',\n    'пьеса',\n    'пялка',\n    'пясть',\n    'пятак',\n    'пятка',\n    'пятно',\n    'пяток',\n    'рабад',\n    'рабат',\n    'рабби',\n    'равви',\n    'рагия',\n    'радар',\n    'раджа',\n    'раджм',\n    'радий',\n    'радио',\n    'радон',\n    'разор',\n    'разум',\n    'раина',\n    'райка',\n    'район',\n    'райтс',\n    'райят',\n    'ракат',\n    'ракия',\n    'ракля',\n    'ракун',\n    'ракша',\n    'ралли',\n    'рамен',\n    'рамка',\n    'рампа',\n    'ранет',\n    'ранец',\n    'ранчо',\n    'рапид',\n    'рапис',\n    'расса',\n    'растр',\n    'ратай',\n    'ратин',\n    'ратит',\n    'ратха',\n    'раунд',\n    'рафид',\n    'рафия',\n    'рахис',\n    'рахит',\n    'рацея',\n    'рация',\n    'рачок',\n    'рашад',\n    'рвань',\n    'рвота',\n    'рдест',\n    'ребаб',\n    'ребек',\n    'ребис',\n    'ребро',\n    'ребус',\n    'ревун',\n    'регби',\n    'регги',\n    'редан',\n    'редис',\n    'редиф',\n    'редия',\n    'редут',\n    'режим',\n    'резак',\n    'резец',\n    'резит',\n    'резка',\n    'резня',\n    'резол',\n    'резон',\n    'резус',\n    'реизм',\n    'рейка',\n    'рекан',\n    'рекон',\n    'ректо',\n    'релиз',\n    'релин',\n    'релит',\n    'рельс',\n    'ремез',\n    'ремен',\n    'ремиз',\n    'ренат',\n    'рендж',\n    'ренет',\n    'рений',\n    'ренин',\n    'ренит',\n    'рента',\n    'репей',\n    'репер',\n    'репка',\n    'репье',\n    'ретен',\n    'ретро',\n    'ретур',\n    'рефюж',\n    'речка',\n    'решка',\n    'ржище',\n    'рибат',\n    'рибит',\n    'ридер',\n    'риель',\n    'рижец',\n    'ризод',\n    'рикша',\n    'рилли',\n    'ринги',\n    'ринит',\n    'рипка',\n    'рипус',\n    'риска',\n    'рисса',\n    'ритон',\n    'ритор',\n    'рифей',\n    'рифли',\n    'рифма',\n    'рицин',\n    'ришта',\n    'робот',\n    'ровня',\n    'рогач',\n    'рогоз',\n    'родан',\n    'родат',\n    'родео',\n    'родий',\n    'родит',\n    'родич',\n    'родня',\n    'рожки',\n    'рожок',\n    'рожон',\n    'розан',\n    'розга',\n    'розит',\n    'рознь',\n    'ройба',\n    'ройка',\n    'рокер',\n    'рокки',\n    'рокот',\n    'рокош',\n    'ролик',\n    'роман',\n    'рондо',\n    'ронжа',\n    'ронин',\n    'ронит',\n    'ропак',\n    'ропот',\n    'ростр',\n    'ротан',\n    'ротин',\n    'ротон',\n    'ротор',\n    'роуит',\n    'рохля',\n    'рояль',\n    'ртуть',\n    'руаит',\n    'рубаб',\n    'рубаи',\n    'рубеж',\n    'рубец',\n    'рубин',\n    'рубка',\n    'рубль',\n    'рубус',\n    'рудит',\n    'рудяк',\n    'ружье',\n    'рузец',\n    'руина',\n    'рукав',\n    'рулет',\n    'рулик',\n    'рулон',\n    'румба',\n    'румпа',\n    'румын',\n    'рунди',\n    'рунец',\n    'рунка',\n    'рупия',\n    'рупор',\n    'русак',\n    'русин',\n    'русич',\n    'русло',\n    'руспо',\n    'рутил',\n    'рутин',\n    'руфер',\n    'руфия',\n    'руфол',\n    'ручей',\n    'ручка',\n    'рыбак',\n    'рыбец',\n    'рыбка',\n    'рывок',\n    'рыжей',\n    'рыжий',\n    'рыжик',\n    'рылец',\n    'рында',\n    'рынок',\n    'рысак',\n    'рысца',\n    'рытье',\n    'рычаг',\n    'рэйит',\n    'рэкет',\n    'рэлей',\n    'рэнга',\n    'рэпер',\n    'рюмка',\n    'рюшка',\n    'рябец',\n    'рябок',\n    'рядно',\n    'рядок',\n    'ряжец',\n    'ряска',\n    'рясна',\n    'саами',\n    'сабан',\n    'сабей',\n    'сабза',\n    'сабля',\n    'сабор',\n    'сабра',\n    'сабур',\n    'саван',\n    'савар',\n    'сават',\n    'савка',\n    'саган',\n    'сагиб',\n    'саджа',\n    'садик',\n    'садка',\n    'садок',\n    'сазан',\n    'саиди',\n    'сайба',\n    'сайга',\n    'сайда',\n    'сайка',\n    'сайра',\n    'саква',\n    'сакля',\n    'сакма',\n    'сакта',\n    'салад',\n    'салат',\n    'сален',\n    'салеп',\n    'салит',\n    'салка',\n    'салол',\n    'салон',\n    'салоп',\n    'салун',\n    'салют',\n    'саман',\n    'самба',\n    'самбо',\n    'самец',\n    'самка',\n    'самса',\n    'самум',\n    'санго',\n    'санид',\n    'санки',\n    'сапаи',\n    'сапер',\n    'сапка',\n    'сапог',\n    'сапун',\n    'сарай',\n    'сарга',\n    'саржа',\n    'сарма',\n    'сарод',\n    'сарос',\n    'сарыч',\n    'сасак',\n    'сатин',\n    'сатир',\n    'сауна',\n    'саунд',\n    'сафра',\n    'сахар',\n    'сахем',\n    'сахиб',\n    'сачок',\n    'сбора',\n    'сброд',\n    'сброс',\n    'сбруя',\n    'свази',\n    'свара',\n    'сваха',\n    'сведа',\n    'свеит',\n    'свеча',\n    'свиль',\n    'свинг',\n    'свист',\n    'свита',\n    'свити',\n    'свитч',\n    'свора',\n    'свояк',\n    'связь',\n    'сглаз',\n    'сдача',\n    'сдвиг',\n    'сдоба',\n    'сеанс',\n    'север',\n    'севец',\n    'севин',\n    'севит',\n    'севок',\n    'сегун',\n    'седан',\n    'седзи',\n    'седло',\n    'седок',\n    'седум',\n    'сеево',\n    'сезам',\n    'сезон',\n    'сейба',\n    'сейсм',\n    'сейша',\n    'секач',\n    'секко',\n    'секта',\n    'селар',\n    'селен',\n    'селин',\n    'селфи',\n    'селям',\n    'семга',\n    'семис',\n    'семит',\n    'семпл',\n    'семья',\n    'сенаж',\n    'сенат',\n    'сенжи',\n    'сенна',\n    'сенон',\n    'сенэн',\n    'сепаж',\n    'сепия',\n    'септа',\n    'серак',\n    'серау',\n    'серер',\n    'серил',\n    'серин',\n    'серир',\n    'сериф',\n    'серия',\n    'серка',\n    'серко',\n    'серна',\n    'серсо',\n    'серум',\n    'серый',\n    'сетка',\n    'сетор',\n    'сетье',\n    'сеунч',\n    'сечат',\n    'сечка',\n    'сиаль',\n    'сибас',\n    'сиван',\n    'сивка',\n    'сивко',\n    'сивуч',\n    'сигла',\n    'сигма',\n    'сидер',\n    'сиджо',\n    'сидор',\n    'сиена',\n    'сизиф',\n    'сизяк',\n    'сикль',\n    'сикоз',\n    'сикон',\n    'силал',\n    'силан',\n    'силат',\n    'силач',\n    'силен',\n    'силил',\n    'силин',\n    'силка',\n    'силок',\n    'силол',\n    'силон',\n    'силос',\n    'силур',\n    'сильф',\n    'симец',\n    'синай',\n    'синап',\n    'сингл',\n    'синдх',\n    'синец',\n    'синид',\n    'синин',\n    'синод',\n    'синти',\n    'синто',\n    'синус',\n    'синяк',\n    'сипай',\n    'сипах',\n    'сирен',\n    'сирин',\n    'сироп',\n    'сисла',\n    'систр',\n    'ситар',\n    'ситец',\n    'ситио',\n    'ситро',\n    'сифон',\n    'скала',\n    'скало',\n    'скань',\n    'скарб',\n    'скарн',\n    'скаут',\n    'сквер',\n    'сквиз',\n    'сквоб',\n    'сквот',\n    'сквош',\n    'скейт',\n    'скена',\n    'скетч',\n    'скиба',\n    'скирд',\n    'скирр',\n    'склад',\n    'склеп',\n    'склон',\n    'скоба',\n    'скоец',\n    'скопа',\n    'скорм',\n    'скотч',\n    'скраб',\n    'скрап',\n    'скреп',\n    'скрип',\n    'скрэб',\n    'скудо',\n    'скука',\n    'скула',\n    'скунс',\n    'слава',\n    'слайд',\n    'слайс',\n    'слань',\n    'слега',\n    'слеза',\n    'сленг',\n    'слива',\n    'слизь',\n    'слинг',\n    'слово',\n    'слуга',\n    'слюда',\n    'слюна',\n    'смазь',\n    'смайл',\n    'смена',\n    'смерд',\n    'смерч',\n    'смесь',\n    'смета',\n    'смола',\n    'смоль',\n    'смотр',\n    'смрад',\n    'смузи',\n    'смута',\n    'смысл',\n    'снафф',\n    'снедь',\n    'сноха',\n    'сныть',\n    'снэки',\n    'собес',\n    'собор',\n    'совет',\n    'совик',\n    'совка',\n    'совок',\n    'соджу',\n    'содом',\n    'созыв',\n    'сойка',\n    'сойма',\n    'сойон',\n    'сойот',\n    'сокер',\n    'сокет',\n    'сокол',\n    'солар',\n    'солея',\n    'солид',\n    'солка',\n    'солод',\n    'соляр',\n    'сомар',\n    'сомик',\n    'сомит',\n    'сомма',\n    'сомон',\n    'сонар',\n    'сонет',\n    'сопка',\n    'сопло',\n    'сопор',\n    'соппа',\n    'сорго',\n    'сорец',\n    'сорит',\n    'сорок',\n    'сорус',\n    'сосед',\n    'сосец',\n    'соска',\n    'сосна',\n    'сосок',\n    'сосуд',\n    'сосун',\n    'сотка',\n    'сотня',\n    'софит',\n    'сошка',\n    'сояги',\n    'спаги',\n    'спазм',\n    'спайк',\n    'спата',\n    'спекл',\n    'спель',\n    'спесо',\n    'спесь',\n    'спина',\n    'спирт',\n    'спица',\n    'сплав',\n    'сплин',\n    'сплит',\n    'спонж',\n    'спора',\n    'спорт',\n    'спред',\n    'спрей',\n    'спрос',\n    'спрус',\n    'спрут',\n    'спурт',\n    'спуск',\n    'спюрк',\n    'среда',\n    'сринг',\n    'срост',\n    'ссора',\n    'ссуда',\n    'стадо',\n    'стаза',\n    'сталь',\n    'станс',\n    'стант',\n    'старт',\n    'старь',\n    'стать',\n    'ствол',\n    'створ',\n    'стезя',\n    'стейк',\n    'стека',\n    'стела',\n    'стело',\n    'стель',\n    'стена',\n    'стенд',\n    'стент',\n    'степс',\n    'степь',\n    'стерх',\n    'стило',\n    'стиль',\n    'стоик',\n    'стокс',\n    'стола',\n    'столб',\n    'столп',\n    'стома',\n    'стопа',\n    'стоун',\n    'стояк',\n    'страж',\n    'страз',\n    'страх',\n    'стриж',\n    'стрик',\n    'стрип',\n    'стрит',\n    'стрия',\n    'строб',\n    'строй',\n    'строп',\n    'струг',\n    'струп',\n    'струя',\n    'стужа',\n    'ступа',\n    'суаре',\n    'судак',\n    'судан',\n    'судза',\n    'судия',\n    'судно',\n    'судок',\n    'судья',\n    'суета',\n    'сукно',\n    'сукре',\n    'сулея',\n    'сулла',\n    'сулой',\n    'сумах',\n    'сумец',\n    'сумка',\n    'сумма',\n    'суоми',\n    'супат',\n    'супер',\n    'супиз',\n    'супин',\n    'сурец',\n    'суржа',\n    'сурик',\n    'сурит',\n    'сурма',\n    'сурна',\n    'сурок',\n    'сурра',\n    'сусак',\n    'сусек',\n    'сусло',\n    'сусук',\n    'сутаж',\n    'сутки',\n    'сутра',\n    'суфет',\n    'суфий',\n    'суфле',\n    'сухая',\n    'сучок',\n    'сучье',\n    'сушка',\n    'сущее',\n    'сфекс',\n    'сфера',\n    'схват',\n    'схема',\n    'схима',\n    'схрон',\n    'сцена',\n    'сцинк',\n    'счеты',\n    'съезд',\n    'сыпец',\n    'сырба',\n    'сырец',\n    'сырок',\n    'сырть',\n    'сырье',\n    'сычик',\n    'сычуг',\n    'сыщик',\n    'сэбин',\n    'сэнто',\n    'сэсэн',\n    'сюжет',\n    'сюита',\n    'сюрко',\n    'сяжок',\n    'сянци',\n    'табак',\n    'табес',\n    'табия',\n    'табла',\n    'табло',\n    'табор',\n    'табун',\n    'тавит',\n    'тавот',\n    'тавро',\n    'тагал',\n    'таган',\n    'тазик',\n    'таино',\n    'таита',\n    'тайга',\n    'тайка',\n    'тайна',\n    'тайра',\n    'тайфи',\n    'тайша',\n    'такин',\n    'такка',\n    'такри',\n    'такса',\n    'такси',\n    'такыр',\n    'такья',\n    'талак',\n    'талан',\n    'талер',\n    'талес',\n    'талиб',\n    'талик',\n    'талит',\n    'талия',\n    'талон',\n    'талус',\n    'талыш',\n    'тальк',\n    'талья',\n    'тамас',\n    'тамга',\n    'тамил',\n    'тамуз',\n    'тамур',\n    'танга',\n    'танго',\n    'танец',\n    'танид',\n    'танин',\n    'танка',\n    'танто',\n    'танхо',\n    'таолу',\n    'тапас',\n    'тапер',\n    'тапес',\n    'тапир',\n    'тапка',\n    'таран',\n    'тараф',\n    'тарга',\n    'тареа',\n    'тарец',\n    'тариф',\n    'таска',\n    'татка',\n    'тафос',\n    'тафта',\n    'тафья',\n    'тахит',\n    'тахта',\n    'тацет',\n    'тачка',\n    'ташка',\n    'таэль',\n    'тварь',\n    'твист',\n    'твиши',\n    'театр',\n    'тебби',\n    'тевет',\n    'тевяк',\n    'тезин',\n    'тезис',\n    'тезка',\n    'теизм',\n    'теист',\n    'текке',\n    'текст',\n    'телец',\n    'телий',\n    'телик',\n    'телит',\n    'телка',\n    'телок',\n    'телом',\n    'телос',\n    'тембр',\n    'темне',\n    'тенар',\n    'тенга',\n    'тенге',\n    'тенда',\n    'тенек',\n    'тенил',\n    'тенит',\n    'тения',\n    'тенор',\n    'тепло',\n    'тераи',\n    'терем',\n    'терец',\n    'терка',\n    'терма',\n    'термы',\n    'терно',\n    'тесак',\n    'теска',\n    'тесла',\n    'тесло',\n    'тесто',\n    'тесть',\n    'тетин',\n    'тетка',\n    'тетра',\n    'теург',\n    'тефра',\n    'техно',\n    'теций',\n    'течка',\n    'тешка',\n    'тиара',\n    'тибет',\n    'тигон',\n    'тигре',\n    'тидея',\n    'тизер',\n    'тикар',\n    'тикер',\n    'тилла',\n    'тилль',\n    'тимар',\n    'тимин',\n    'тимит',\n    'тимол',\n    'тимус',\n    'тиоат',\n    'типаж',\n    'типец',\n    'типун',\n    'тираж',\n    'тирам',\n    'тиран',\n    'тирит',\n    'тиски',\n    'титан',\n    'титин',\n    'титло',\n    'титон',\n    'титул',\n    'тиуль',\n    'тифия',\n    'тифон',\n    'тихит',\n    'ткань',\n    'тлако',\n    'тобет',\n    'товар',\n    'тодес',\n    'тодея',\n    'тозил',\n    'тоизм',\n    'тойон',\n    'токай',\n    'токен',\n    'токин',\n    'толай',\n    'толан',\n    'толар',\n    'толил',\n    'толоа',\n    'толос',\n    'толпа',\n    'толща',\n    'томан',\n    'томар',\n    'томат',\n    'томец',\n    'томин',\n    'томич',\n    'тонар',\n    'тонга',\n    'тондо',\n    'тонел',\n    'тонер',\n    'тонец',\n    'тоний',\n    'тоник',\n    'тонит',\n    'тонна',\n    'тонус',\n    'тонфа',\n    'топаз',\n    'топик',\n    'топка',\n    'топор',\n    'топос',\n    'топот',\n    'торба',\n    'торет',\n    'торец',\n    'торий',\n    'торит',\n    'торон',\n    'торос',\n    'торус',\n    'тоска',\n    'тосол',\n    'тотем',\n    'тофус',\n    'тохар',\n    'точка',\n    'точок',\n    'трава',\n    'травы',\n    'трайк',\n    'тракт',\n    'трама',\n    'трамп',\n    'транк',\n    'транс',\n    'транш',\n    'трапп',\n    'трасс',\n    'траст',\n    'трата',\n    'траур',\n    'треба',\n    'трейд',\n    'трель',\n    'трема',\n    'тренд',\n    'трент',\n    'тренч',\n    'трень',\n    'треск',\n    'трест',\n    'треть',\n    'треух',\n    'трефа',\n    'треха',\n    'триаж',\n    'триал',\n    'триас',\n    'триба',\n    'трига',\n    'триди',\n    'триен',\n    'триер',\n    'тризм',\n    'тризн',\n    'триил',\n    'триин',\n    'трико',\n    'триод',\n    'триол',\n    'трион',\n    'трипс',\n    'трокс',\n    'тролл',\n    'тромб',\n    'тромп',\n    'трона',\n    'тронк',\n    'тропа',\n    'трояк',\n    'труба',\n    'трусы',\n    'труха',\n    'трюмо',\n    'тсуга',\n    'туаль',\n    'тубаж',\n    'тубус',\n    'тувит',\n    'тугай',\n    'тугра',\n    'тугун',\n    'тузик',\n    'туизл',\n    'туйан',\n    'туйен',\n    'туйон',\n    'тукан',\n    'тулес',\n    'тулий',\n    'тулит',\n    'тулуп',\n    'тулья',\n    'туляк',\n    'тумак',\n    'туман',\n    'тумба',\n    'тумен',\n    'тумор',\n    'тумыр',\n    'тунга',\n    'тунец',\n    'туонг',\n    'тупей',\n    'тупец',\n    'тупик',\n    'турач',\n    'турец',\n    'турка',\n    'турма',\n    'турне',\n    'турок',\n    'турус',\n    'турча',\n    'тутак',\n    'тутор',\n    'тутси',\n    'тутти',\n    'туфля',\n    'туцзя',\n    'тушин',\n    'тушка',\n    'тхару',\n    'тхебе',\n    'тщета',\n    'тыква',\n    'тынок',\n    'тырса',\n    'тычок',\n    'тэнно',\n    'тюбаж',\n    'тюбик',\n    'тювик',\n    'тюмыр',\n    'тюнер',\n    'тюник',\n    'тюпец',\n    'тюрбе',\n    'тюрбо',\n    'тюрик',\n    'тюркю',\n    'тюрок',\n    'тюфяк',\n    'тюшен',\n    'тябло',\n    'тягач',\n    'тягло',\n    'тягун',\n    'тяжба',\n    'тяпка',\n    'убрус',\n    'убыль',\n    'увеит',\n    'увраж',\n    'увула',\n    'угода',\n    'уголь',\n    'угорь',\n    'удаль',\n    'удама',\n    'удана',\n    'удача',\n    'удерж',\n    'удила',\n    'удэге',\n    'узанс',\n    'узбек',\n    'узбой',\n    'узвар',\n    'уздцы',\n    'узерк',\n    'узина',\n    'узник',\n    'узура',\n    'уигит',\n    'уилец',\n    'уинал',\n    'уинец',\n    'уипет',\n    'уйгур',\n    'уклад',\n    'уклея',\n    'уклон',\n    'укроп',\n    'уксус',\n    'улика',\n    'улица',\n    'улыба',\n    'ульва',\n    'улька',\n    'умами',\n    'умбит',\n    'умбон',\n    'умбра',\n    'умбры',\n    'умиак',\n    'умник',\n    'умора',\n    'унаби',\n    'унжак',\n    'униат',\n    'унион',\n    'унтер',\n    'унция',\n    'упрек',\n    'упырь',\n    'ураец',\n    'ураза',\n    'урали',\n    'ураса',\n    'ургит',\n    'урдит',\n    'уреид',\n    'урема',\n    'урина',\n    'урсан',\n    'уртит',\n    'уруту',\n    'уруть',\n    'ускок',\n    'уснея',\n    'успех',\n    'устав',\n    'усташ',\n    'устой',\n    'уступ',\n    'устье',\n    'утеря',\n    'утеха',\n    'утиль',\n    'утица',\n    'ухарь',\n    'ухват',\n    'уцмий',\n    'учеба',\n    'учинг',\n    'учком',\n    'учлет',\n    'учхоз',\n    'ушкуй',\n    'ушник',\n    'ущерб',\n    'уярец',\n    'фабра',\n    'фавид',\n    'фавор',\n    'фавус',\n    'фагот',\n    'фаден',\n    'фазан',\n    'фазер',\n    'фазис',\n    'фазия',\n    'фазон',\n    'файда',\n    'файер',\n    'факел',\n    'факир',\n    'факих',\n    'фалда',\n    'фален',\n    'фальц',\n    'фанат',\n    'фанер',\n    'фанза',\n    'фанта',\n    'фанти',\n    'фанус',\n    'фарад',\n    'фарси',\n    'фасад',\n    'фасет',\n    'фаска',\n    'фасон',\n    'фасты',\n    'фатеи',\n    'фатин',\n    'фатом',\n    'фатум',\n    'фауна',\n    'фацет',\n    'фация',\n    'фаянс',\n    'фегея',\n    'фекал',\n    'фелло',\n    'фенак',\n    'фенат',\n    'фенек',\n    'фений',\n    'фенил',\n    'фенин',\n    'фенит',\n    'фенол',\n    'феном',\n    'фенон',\n    'ферзь',\n    'ферма',\n    'ферми',\n    'фесец',\n    'феска',\n    'фетва',\n    'фетиш',\n    'фетоз',\n    'фетюк',\n    'фиада',\n    'фиакр',\n    'фибра',\n    'фидер',\n    'фижмы',\n    'физик',\n    'фикус',\n    'филей',\n    'филер',\n    'филид',\n    'филин',\n    'филия',\n    'филум',\n    'фильм',\n    'фильц',\n    'фимоз',\n    'финал',\n    'финик',\n    'финиш',\n    'финка',\n    'финки',\n    'финна',\n    'финта',\n    'фиорд',\n    'фирер',\n    'фирма',\n    'фитан',\n    'фитил',\n    'фитин',\n    'фитол',\n    'фитон',\n    'фицин',\n    'фишка',\n    'фланг',\n    'фланк',\n    'флеин',\n    'флейм',\n    'флейт',\n    'флейц',\n    'флешь',\n    'флиак',\n    'флинг',\n    'флинт',\n    'флирт',\n    'флокк',\n    'флокс',\n    'флопс',\n    'флора',\n    'флосс',\n    'флоут',\n    'флуер',\n    'флюат',\n    'флюид',\n    'флюта',\n    'флюте',\n    'фляга',\n    'фляер',\n    'фляки',\n    'фобия',\n    'фокон',\n    'фокус',\n    'фолат',\n    'фолио',\n    'фолия',\n    'фомка',\n    'фомоз',\n    'фомор',\n    'фондю',\n    'фонон',\n    'фория',\n    'форма',\n    'форон',\n    'форос',\n    'форте',\n    'форум',\n    'фоска',\n    'фосса',\n    'фотка',\n    'фотон',\n    'фофан',\n    'фраза',\n    'франк',\n    'франт',\n    'фрахт',\n    'фреза',\n    'фрейм',\n    'френч',\n    'фреон',\n    'фрина',\n    'фриул',\n    'фронт',\n    'фрукт',\n    'фугас',\n    'фужер',\n    'фузея',\n    'фузит',\n    'фузия',\n    'фукия',\n    'фукус',\n    'фуляр',\n    'фураж',\n    'фуран',\n    'фурил',\n    'фурин',\n    'фурия',\n    'фурка',\n    'фурма',\n    'фурор',\n    'фуста',\n    'футер',\n    'футон',\n    'футор',\n    'фуэте',\n    'фьорд',\n    'фьюжн',\n    'фюзен',\n    'фюзит',\n    'фюрер',\n    'хавал',\n    'хадак',\n    'хаджв',\n    'хаджи',\n    'хадис',\n    'хазан',\n    'хазар',\n    'хайку',\n    'хайло',\n    'хакас',\n    'хакер',\n    'хакея',\n    'хаким',\n    'хакит',\n    'халал',\n    'халат',\n    'халва',\n    'халео',\n    'халиф',\n    'халон',\n    'халха',\n    'хамит',\n    'хамка',\n    'хамон',\n    'хамса',\n    'хамсе',\n    'хамье',\n    'ханжа',\n    'ханка',\n    'ханос',\n    'ханум',\n    'ханша',\n    'харам',\n    'харза',\n    'харра',\n    'харчо',\n    'хасид',\n    'хаски',\n    'хасса',\n    'хаста',\n    'хастл',\n    'хатиб',\n    'хатка',\n    'хатты',\n    'хатун',\n    'хатыб',\n    'хауса',\n    'хафиз',\n    'хашар',\n    'хвала',\n    'хвост',\n    'хедер',\n    'хедже',\n    'хедив',\n    'хейит',\n    'хейти',\n    'хекат',\n    'хелат',\n    'хемоз',\n    'хеник',\n    'хенна',\n    'херем',\n    'херес',\n    'херик',\n    'хиазм',\n    'хивец',\n    'хилер',\n    'хилус',\n    'химик',\n    'химия',\n    'химус',\n    'хинди',\n    'хинду',\n    'хинен',\n    'хинид',\n    'хинин',\n    'хинит',\n    'хинол',\n    'хинон',\n    'хиппи',\n    'хирот',\n    'хитин',\n    'хитон',\n    'хлест',\n    'хлупь',\n    'хлыст',\n    'хлюст',\n    'хлябь',\n    'хмель',\n    'хмурь',\n    'хоана',\n    'хобби',\n    'хобец',\n    'хобот',\n    'ховея',\n    'ходжа',\n    'ходок',\n    'ходун',\n    'хоким',\n    'хокку',\n    'холан',\n    'холат',\n    'холин',\n    'холка',\n    'холод',\n    'холоп',\n    'холст',\n    'холуй',\n    'хольд',\n    'хольк',\n    'хомус',\n    'хомут',\n    'хомяк',\n    'хондо',\n    'хопеш',\n    'хорал',\n    'хорда',\n    'хорег',\n    'хорей',\n    'хорек',\n    'хорея',\n    'хорон',\n    'хорос',\n    'хоста',\n    'хохма',\n    'хохол',\n    'хохот',\n    'хошун',\n    'хруст',\n    'худия',\n    'худое',\n    'хулок',\n    'хулос',\n    'хумса',\n    'хумус',\n    'хунну',\n    'хунта',\n    'хуплу',\n    'хурал',\n    'хурма',\n    'хутба',\n    'хутия',\n    'хутор',\n    'хутун',\n    'хычин',\n    'хьенг',\n    'хянга',\n    'цадик',\n    'цанга',\n    'цанит',\n    'цапка',\n    'цапля',\n    'цапфа',\n    'царга',\n    'царек',\n    'цахур',\n    'цверг',\n    'цевин',\n    'цевка',\n    'цевье',\n    'цедра',\n    'цезий',\n    'целая',\n    'целер',\n    'целик',\n    'целла',\n    'целое',\n    'целом',\n    'ценоз',\n    'центр',\n    'ценур',\n    'цепея',\n    'церан',\n    'церат',\n    'церва',\n    'церий',\n    'церин',\n    'церит',\n    'цетан',\n    'цетен',\n    'цетил',\n    'цехин',\n    'цзинь',\n    'цибик',\n    'цигун',\n    'циема',\n    'цизит',\n    'цикас',\n    'цикля',\n    'цимат',\n    'цимен',\n    'цимес',\n    'цимол',\n    'цинаш',\n    'цинга',\n    'цинеб',\n    'циник',\n    'цинна',\n    'ципао',\n    'цирик',\n    'циста',\n    'цитоз',\n    'цитра',\n    'цифра',\n    'цокор',\n    'цокот',\n    'цуйка',\n    'цукат',\n    'цыган',\n    'цыпки',\n    'цяншу',\n    'чабан',\n    'чабер',\n    'чаган',\n    'чагра',\n    'чадар',\n    'чадец',\n    'чадра',\n    'чайка',\n    'чайот',\n    'чакан',\n    'чакма',\n    'чакра',\n    'чалка',\n    'чалма',\n    'чалоп',\n    'чанах',\n    'чанги',\n    'чанго',\n    'чанди',\n    'чанка',\n    'чаоит',\n    'чапсы',\n    'чардж',\n    'чарец',\n    'чарка',\n    'чарок',\n    'часть',\n    'чатни',\n    'чашка',\n    'чебак',\n    'чебер',\n    'чебот',\n    'чекан',\n    'челак',\n    'челка',\n    'чемер',\n    'ченит',\n    'чепан',\n    'чепец',\n    'черва',\n    'червь',\n    'черед',\n    'через',\n    'череп',\n    'чернь',\n    'черта',\n    'черут',\n    'ческа',\n    'честь',\n    'четки',\n    'чехит',\n    'чехол',\n    'чечен',\n    'чечет',\n    'чечил',\n    'чешка',\n    'чешуя',\n    'чибис',\n    'чибча',\n    'чижик',\n    'чилим',\n    'чинар',\n    'чинга',\n    'чинка',\n    'чинук',\n    'чипсы',\n    'чирей',\n    'чирок',\n    'чирус',\n    'число',\n    'читер',\n    'читка',\n    'читта',\n    'чокве',\n    'чокер',\n    'чокой',\n    'чомга',\n    'чомпи',\n    'чорба',\n    'чрево',\n    'чреда',\n    'чтиво',\n    'чтица',\n    'чубук',\n    'чувал',\n    'чувач',\n    'чуваш',\n    'чувяк',\n    'чугун',\n    'чудак',\n    'чудик',\n    'чужак',\n    'чужое',\n    'чуйка',\n    'чукур',\n    'чукча',\n    'чулан',\n    'чулок',\n    'чумак',\n    'чумка',\n    'чунга',\n    'чунец',\n    'чурак',\n    'чурек',\n    'чурка',\n    'чутье',\n    'чухна',\n    'чучхе',\n    'чушка',\n    'шабаш',\n    'шабер',\n    'шабли',\n    'шабот',\n    'шабур',\n    'шавка',\n    'шадуф',\n    'шаири',\n    'шайба',\n    'шайка',\n    'шакал',\n    'шакти',\n    'шакья',\n    'шалаш',\n    'шалон',\n    'шалот',\n    'шалун',\n    'шаман',\n    'шамес',\n    'шамот',\n    'шанга',\n    'шанец',\n    'шанза',\n    'шанкр',\n    'шапка',\n    'шарав',\n    'шарик',\n    'шарка',\n    'шарпи',\n    'шаруа',\n    'шасла',\n    'шассе',\n    'шасси',\n    'шатар',\n    'шатен',\n    'шатер',\n    'шатра',\n    'шаттл',\n    'шатун',\n    'шафер',\n    'шахид',\n    'шахин',\n    'шахта',\n    'шашка',\n    'шашки',\n    'шашни',\n    'шванк',\n    'швара',\n    'шварт',\n    'шверт',\n    'швунг',\n    'шеваж',\n    'шевер',\n    'шевро',\n    'шейка',\n    'шейха',\n    'шелеп',\n    'шелом',\n    'шелон',\n    'шелти',\n    'шельф',\n    'шеляг',\n    'шемая',\n    'шемиз',\n    'шенит',\n    'шепот',\n    'шериф',\n    'шерпа',\n    'шерри',\n    'шефша',\n    'шиацу',\n    'шибер',\n    'шиизм',\n    'шимми',\n    'шинка',\n    'шинок',\n    'шипик',\n    'шипок',\n    'шипун',\n    'ширма',\n    'ширяш',\n    'шитик',\n    'шитье',\n    'шифер',\n    'шифон',\n    'шихан',\n    'шихта',\n    'шишак',\n    'шишка',\n    'шишок',\n    'шкала',\n    'шкант',\n    'шквал',\n    'шкерт',\n    'шкода',\n    'школа',\n    'шкура',\n    'шланг',\n    'шлейф',\n    'шлица',\n    'шлюсс',\n    'шляпа',\n    'шмель',\n    'шнапс',\n    'шнека',\n    'шнитт',\n    'шнява',\n    'шокер',\n    'шомаж',\n    'шопер',\n    'шопин',\n    'шорец',\n    'шорея',\n    'шорит',\n    'шорка',\n    'шорня',\n    'шорох',\n    'шорты',\n    'шоссе',\n    'шофар',\n    'шофер',\n    'шошон',\n    'шпага',\n    'шпала',\n    'шпень',\n    'шпиль',\n    'шпион',\n    'шпирт',\n    'шпона',\n    'шпора',\n    'шприц',\n    'шпрот',\n    'шпрух',\n    'шпуля',\n    'шпунт',\n    'шранг',\n    'шратт',\n    'шримс',\n    'шрифт',\n    'штамб',\n    'штамм',\n    'штамп',\n    'штаны',\n    'штейн',\n    'штерт',\n    'штиль',\n    'штифт',\n    'штора',\n    'шторм',\n    'штраф',\n    'штрек',\n    'штрих',\n    'штроп',\n    'штука',\n    'штурм',\n    'штырь',\n    'шубат',\n    'шубер',\n    'шувыр',\n    'шугай',\n    'шудра',\n    'шужук',\n    'шуйца',\n    'шулер',\n    'шулик',\n    'шумер',\n    'шумка',\n    'шунья',\n    'шурин',\n    'шурпа',\n    'шуруп',\n    'шутер',\n    'шутка',\n    'шушун',\n    'шхеры',\n    'шхоут',\n    'шхуна',\n    'шютте',\n    'щебет',\n    'щегол',\n    'щекот',\n    'щелок',\n    'щенок',\n    'щепка',\n    'щетка',\n    'щечка',\n    'щипец',\n    'щипка',\n    'щипок',\n    'щипцы',\n    'щитик',\n    'щиток',\n    'щокур',\n    'щупик',\n    'щупка',\n    'щурка',\n    'щурок',\n    'щучка',\n    'эвеит',\n    'эвенк',\n    'эвлит',\n    'эгида',\n    'эгрет',\n    'эдеин',\n    'эджер',\n    'эдикт',\n    'эдукт',\n    'эйдос',\n    'эйфоб',\n    'эквол',\n    'экзон',\n    'экзот',\n    'эклер',\n    'экран',\n    'эксод',\n    'экшен',\n    'элеат',\n    'элект',\n    'элиит',\n    'элита',\n    'эллин',\n    'эмаль',\n    'эмбия',\n    'эмбол',\n    'эммер',\n    'эмпат',\n    'эмсец',\n    'эмшер',\n    'энзим',\n    'энрик',\n    'энтез',\n    'эозин',\n    'эозит',\n    'эозон',\n    'эолит',\n    'эоцен',\n    'эпарх',\n    'эпика',\n    'эпонж',\n    'эпоха',\n    'эпохе',\n    'эрбий',\n    'эргин',\n    'эрдит',\n    'эрзац',\n    'эрика',\n    'эркер',\n    'эррит',\n    'эртли',\n    'эртуг',\n    'эсдек',\n    'эскер',\n    'эскиз',\n    'эснаф',\n    'эспри',\n    'эссен',\n    'эстет',\n    'эсток',\n    'эсцин',\n    'эталь',\n    'этвеш',\n    'этика',\n    'этмия',\n    'этнос',\n    'этрол',\n    'эулит',\n    'эуфон',\n    'эфапс',\n    'эфель',\n    'эфиоп',\n    'эфира',\n    'эфрин',\n    'эхмея',\n    'эшара',\n    'эшарп',\n    'эшель',\n    'юанит',\n    'юглон',\n    'югрич',\n    'юддит',\n    'юдоль',\n    'юзист',\n    'юитка',\n    'юката',\n    'юкола',\n    'юлина',\n    'юмизм',\n    'юнайт',\n    'юнгит',\n    'юниор',\n    'юница',\n    'юнкер',\n    'юнкор',\n    'юннат',\n    'юнона',\n    'юноша',\n    'юриит',\n    'юрист',\n    'юрфак',\n    'ютаит',\n    'юферс',\n    'юшман',\n    'ябеда',\n    'ябиру',\n    'ягеин',\n    'ягель',\n    'ягиит',\n    'ягода',\n    'ягоит',\n    'ягуар',\n    'яичко',\n    'якана',\n    'якорь',\n    'ялапа',\n    'ялбот',\n    'ямаец',\n    'ямщик',\n    'ямынь',\n    'янтра',\n    'яодао',\n    'япикс',\n    'ярица',\n    'ярлит',\n    'ярлык',\n    'яруро',\n    'ярыга',\n    'ясень',\n    'яспис',\n    'яссец',\n    'яство',\n    'ястык',\n    'ясырь',\n    'ятвяг',\n    'ятовь',\n    'яхонт',\n    'яшмак'\n];\nexport const getRandomWord = () => words[Math.floor(Math.random() * words.length)];\nexport const doesWordExists = (w) => words.includes(w);\n","<script lang=\"ts\">\n  import { createEventDispatcher } from 'svelte';\n\n  const dispatch = createEventDispatcher(),\n    keyboard = [\n      ['й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х', 'ъ'],\n      ['ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж', 'э'],\n      ['enter', 'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю', '<--']\n    ];\n\n  export let yellowKeys = [],\n    greenKeys = [],\n    blackKeys = [];\n</script>\n\n<section>\n  {#each keyboard as row}\n    <div class=\"row\">\n      {#each row as key}\n        <button\n          class={greenKeys.includes(key)\n            ? 'green'\n            : yellowKeys.includes(key)\n            ? 'yellow'\n            : blackKeys.includes(key)\n            ? 'black'\n            : ''}\n          on:click={() => dispatch('click', key)}>{key}</button>\n      {/each}\n    </div>\n  {/each}\n</section>\n\n<style>\n  div {\n    display: flex;\n    justify-content: center;\n    gap: 5px;\n    margin-top: 5px;\n  }\n  button {\n    font-size: 2.5rem;\n    border: 1px solid white;\n    border-radius: 10px;\n    color: white;\n    padding: 0.5rem;\n    background: transparent;\n    cursor: pointer;\n    transition: background-color 1s ease;\n  }\n  .yellow {\n    background-color: #947e00;\n  }\n  .green {\n    background-color: #004100;\n  }\n  .black {\n    background-color: #0f0f0f;\n  }\n</style>\n","<script lang=\"ts\">\n  import { getRandomWord, doesWordExists } from './words';\n  import Keyboard from './Keyboard.svelte';\n\n  let word,\n    attempts: { value: string; class: '' | 'green' | 'yellow' }[][],\n    activeAttempt,\n    yellowKeys,\n    greenKeys,\n    blackKeys;\n\n  const reloadGame = () => {\n      word = getRandomWord();\n      attempts = new Array(6)\n        .fill('')\n        .map(() => new Array(5).fill('').map(() => ({ value: ' ', class: '' })));\n      activeAttempt = 0;\n      yellowKeys = [];\n      greenKeys = [];\n      blackKeys = [];\n    },\n    onKeyPress = e => {\n      const key = e.key.toLowerCase();\n      if (\n        ![...Array.from('йцукенгшщзхъфывапролджэячсмитьбю'), 'backspace', 'enter', '<--'].includes(\n          key\n        )\n      )\n        return;\n      switch (key) {\n        case '<--':\n        case 'backspace':\n          if (attempts[activeAttempt][0].value !== ' ')\n            attempts[activeAttempt][\n              attempts[activeAttempt].findIndex(d => d.value === ' ') === -1\n                ? 4\n                : attempts[activeAttempt].findIndex(d => d.value === ' ') - 1\n            ].value = ' ';\n          break;\n        case 'enter':\n          if (attempts[activeAttempt].reduce((a, b) => a + b.value, '') === word) {\n            alert('Вы выиграли');\n            reloadGame();\n            break;\n          }\n          if (attempts[activeAttempt].find(d => d.value === ' ')) break;\n          if (!doesWordExists(attempts[activeAttempt].reduce((a, b) => a + b.value, ''))) {\n            alert('Этого слова нет в нашем словаре');\n            break;\n          }\n          let answer = Array.from(word);\n          for (const i in attempts[activeAttempt])\n            if (attempts[activeAttempt][i].value === answer[i]) {\n              attempts[activeAttempt][i].class = 'green';\n              answer[i] = ' ';\n              greenKeys = [...greenKeys, attempts[activeAttempt][i].value];\n            }\n          for (const i in attempts[activeAttempt])\n            if (answer.includes(attempts[activeAttempt][i].value)) {\n              attempts[activeAttempt][i].class = 'yellow';\n              answer[answer.indexOf(attempts[activeAttempt][i].value)] = ' ';\n              yellowKeys = [...yellowKeys, attempts[activeAttempt][i].value];\n            } else blackKeys = [...blackKeys, attempts[activeAttempt][i].value];\n\n          activeAttempt++;\n          if (activeAttempt > 5) {\n            alert(`Вы проиграли. Слово было ${word}`);\n            reloadGame();\n            break;\n          }\n          break;\n        default:\n          if (attempts[activeAttempt][4].value === ' ') {\n            attempts[activeAttempt][attempts[activeAttempt].findIndex(d => d.value === ' ')].value =\n              key;\n          }\n      }\n    };\n\n  reloadGame();\n</script>\n\n<svelte:window on:keydown={onKeyPress} />\n\n<header>\n  <h1>ВОРДЛ</h1>\n</header>\n<main>\n  <section>\n    {#each attempts as attempt, i}\n      <p class:active={activeAttempt === i}>\n        {#each attempt as letter}\n          <span class={letter.class}>\n            {letter.value.toUpperCase()}\n          </span>\n        {/each}\n      </p>\n    {/each}\n  </section>\n  <Keyboard\n    on:click={({ detail }) => onKeyPress({ key: detail })}\n    {blackKeys}\n    {yellowKeys}\n    {greenKeys} />\n</main>\n<footer>\n  <p>Сайт сделал RonanRU</p>\n  <a href=\"https://github.com/ronanru/wordle-ru\" target=\"_blank\" rel=\"noopener noreferrer\">\n    Посмотреть код сайта на GitHub\n  </a>\n</footer>\n\n<style>\n  h1 {\n    margin: 1rem 0;\n  }\n  section {\n    width: min-content;\n    margin: 0 auto;\n  }\n  section p {\n    display: grid;\n    gap: 1rem;\n    grid-template-columns: repeat(5, 1fr);\n    margin: 2.5rem 0;\n  }\n  section p.active span {\n    background: transparent;\n  }\n  span {\n    border: 1px solid white;\n    width: 5rem;\n    height: 5rem;\n    box-sizing: border-box;\n    padding: 1rem;\n    border-radius: 5px;\n    display: inline-block;\n    display: grid;\n    place-items: center;\n    background: #0f0f0f;\n  }\n  .yellow {\n    background-color: #947e00;\n  }\n  .green {\n    background-color: #004100;\n  }\n  footer {\n    margin-top: 5rem;\n    font-size: 0.5em;\n    text-align: center;\n  }\n  a {\n    color: white;\n  }\n</style>\n","import App from './App.svelte';\nconst app = new App({\n    target: document.body,\n    props: {\n        name: 'world'\n    }\n});\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","null_to_empty","value","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","toggle_class","toggle","classList","current_component","set_current_component","component","createEventDispatcher","Error","get_current_component","type","detail","callbacks","$$","bubbles","e","createEvent","initCustomEvent","custom_event","slice","call","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","seen_callbacks","Set","flushidx","flush","saved_component","update","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","transition_in","block","local","delete","mount_component","customElement","on_mount","on_destroy","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","c","intro","SvelteComponent","$destroy","this","$on","index","indexOf","splice","$set","$$props","obj","$$set","keys","words","includes","dispatch","yellowKeys","greenKeys","blackKeys","key","toUpperCase","class","wholeText","o","outros","word","attempts","activeAttempt","reloadGame","Math","floor","random","onKeyPress","toLowerCase","w","findIndex","reduce","alert","find","answer","body"],"mappings":"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"}